package me.ele.talaris.hermes.client;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-22")
public class THermesMessageTask
		implements
		org.apache.thrift.TBase<THermesMessageTask, THermesMessageTask._Fields>,
		java.io.Serializable, Cloneable, Comparable<THermesMessageTask> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"THermesMessageTask");

	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"id", org.apache.thrift.protocol.TType.I64, (short) 1);
	private static final org.apache.thrift.protocol.TField MASS_SEND_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"mass_send", org.apache.thrift.protocol.TType.BOOL, (short) 2);
	private static final org.apache.thrift.protocol.TField RECEIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"receivers", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 4);
	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"create_time", org.apache.thrift.protocol.TType.I64, (short) 5);
	private static final org.apache.thrift.protocol.TField NEED_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"need_reply", org.apache.thrift.protocol.TType.BOOL, (short) 6);
	private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"message", org.apache.thrift.protocol.TType.STRING, (short) 7);
	private static final org.apache.thrift.protocol.TField RETRY__FIELD_DESC = new org.apache.thrift.protocol.TField(
			"retry_", org.apache.thrift.protocol.TType.I16, (short) 8);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class,
				new THermesMessageTaskStandardSchemeFactory());
		schemes.put(TupleScheme.class,
				new THermesMessageTaskTupleSchemeFactory());
	}

	public long id; // required
	public boolean mass_send; // required
	public String receivers; // required
	/**
	 *
	 * @see THermesTaskStatus
	 */
	public THermesTaskStatus status; // required
	public long create_time; // required
	public boolean need_reply; // required
	public String message; // required
	public short retry_; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ID((short) 1, "id"), MASS_SEND((short) 2, "mass_send"), RECEIVERS(
				(short) 3, "receivers"),
		/**
		 *
		 * @see THermesTaskStatus
		 */
		STATUS((short) 4, "status"), CREATE_TIME((short) 5, "create_time"), NEED_REPLY(
				(short) 6, "need_reply"), MESSAGE((short) 7, "message"), RETRY_(
				(short) 8, "retry_");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ID
				return ID;
			case 2: // MASS_SEND
				return MASS_SEND;
			case 3: // RECEIVERS
				return RECEIVERS;
			case 4: // STATUS
				return STATUS;
			case 5: // CREATE_TIME
				return CREATE_TIME;
			case 6: // NEED_REPLY
				return NEED_REPLY;
			case 7: // MESSAGE
				return MESSAGE;
			case 8: // RETRY_
				return RETRY_;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ID_ISSET_ID = 0;
	private static final int __MASS_SEND_ISSET_ID = 1;
	private static final int __CREATE_TIME_ISSET_ID = 2;
	private static final int __NEED_REPLY_ISSET_ID = 3;
	private static final int __RETRY__ISSET_ID = 4;
	private byte __isset_bitfield = 0;
	private static final _Fields optionals[] = { _Fields.RETRY_ };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData(
				"id", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I64, "TaskId")));
		tmpMap.put(_Fields.MASS_SEND,
				new org.apache.thrift.meta_data.FieldMetaData("mass_send",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.RECEIVERS,
				new org.apache.thrift.meta_data.FieldMetaData("receivers",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.EnumMetaData(
								org.apache.thrift.protocol.TType.ENUM,
								THermesTaskStatus.class)));
		tmpMap.put(_Fields.CREATE_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("create_time",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I64,
								"Timestamp")));
		tmpMap.put(_Fields.NEED_REPLY,
				new org.apache.thrift.meta_data.FieldMetaData("need_reply",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.MESSAGE,
				new org.apache.thrift.meta_data.FieldMetaData("message",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RETRY_,
				new org.apache.thrift.meta_data.FieldMetaData("retry_",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I16)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				THermesMessageTask.class, metaDataMap);
	}

	public THermesMessageTask() {
	}

	public THermesMessageTask(long id, boolean mass_send, String receivers,
			THermesTaskStatus status, long create_time, boolean need_reply,
			String message) {
		this();
		this.id = id;
		setIdIsSet(true);
		this.mass_send = mass_send;
		setMass_sendIsSet(true);
		this.receivers = receivers;
		this.status = status;
		this.create_time = create_time;
		setCreate_timeIsSet(true);
		this.need_reply = need_reply;
		setNeed_replyIsSet(true);
		this.message = message;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public THermesMessageTask(THermesMessageTask other) {
		__isset_bitfield = other.__isset_bitfield;
		this.id = other.id;
		this.mass_send = other.mass_send;
		if (other.isSetReceivers()) {
			this.receivers = other.receivers;
		}
		if (other.isSetStatus()) {
			this.status = other.status;
		}
		this.create_time = other.create_time;
		this.need_reply = other.need_reply;
		if (other.isSetMessage()) {
			this.message = other.message;
		}
		this.retry_ = other.retry_;
	}

	public THermesMessageTask deepCopy() {
		return new THermesMessageTask(this);
	}

	public void clear() {
		setIdIsSet(false);
		this.id = 0;
		setMass_sendIsSet(false);
		this.mass_send = false;
		this.receivers = null;
		this.status = null;
		setCreate_timeIsSet(false);
		this.create_time = 0;
		setNeed_replyIsSet(false);
		this.need_reply = false;
		this.message = null;
		setRetry_IsSet(false);
		this.retry_ = 0;
	}

	public long getId() {
		return this.id;
	}

	public THermesMessageTask setId(long id) {
		this.id = id;
		setIdIsSet(true);
		return this;
	}

	public void unsetId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__ID_ISSET_ID);
	}

	/**
	 * Returns true if field id is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetId() {
		return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
	}

	public void setIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__ID_ISSET_ID, value);
	}

	public boolean isMass_send() {
		return this.mass_send;
	}

	public THermesMessageTask setMass_send(boolean mass_send) {
		this.mass_send = mass_send;
		setMass_sendIsSet(true);
		return this;
	}

	public void unsetMass_send() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__MASS_SEND_ISSET_ID);
	}

	/**
	 * Returns true if field mass_send is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetMass_send() {
		return EncodingUtils.testBit(__isset_bitfield, __MASS_SEND_ISSET_ID);
	}

	public void setMass_sendIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__MASS_SEND_ISSET_ID, value);
	}

	public String getReceivers() {
		return this.receivers;
	}

	public THermesMessageTask setReceivers(String receivers) {
		this.receivers = receivers;
		return this;
	}

	public void unsetReceivers() {
		this.receivers = null;
	}

	/**
	 * Returns true if field receivers is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetReceivers() {
		return this.receivers != null;
	}

	public void setReceiversIsSet(boolean value) {
		if (!value) {
			this.receivers = null;
		}
	}

	/**
	 *
	 * @see THermesTaskStatus
	 */
	public THermesTaskStatus getStatus() {
		return this.status;
	}

	/**
	 *
	 * @see THermesTaskStatus
	 */
	public THermesMessageTask setStatus(THermesTaskStatus status) {
		this.status = status;
		return this;
	}

	public void unsetStatus() {
		this.status = null;
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatus() {
		return this.status != null;
	}

	public void setStatusIsSet(boolean value) {
		if (!value) {
			this.status = null;
		}
	}

	public long getCreate_time() {
		return this.create_time;
	}

	public THermesMessageTask setCreate_time(long create_time) {
		this.create_time = create_time;
		setCreate_timeIsSet(true);
		return this;
	}

	public void unsetCreate_time() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__CREATE_TIME_ISSET_ID);
	}

	/**
	 * Returns true if field create_time is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetCreate_time() {
		return EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
	}

	public void setCreate_timeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__CREATE_TIME_ISSET_ID, value);
	}

	public boolean isNeed_reply() {
		return this.need_reply;
	}

	public THermesMessageTask setNeed_reply(boolean need_reply) {
		this.need_reply = need_reply;
		setNeed_replyIsSet(true);
		return this;
	}

	public void unsetNeed_reply() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__NEED_REPLY_ISSET_ID);
	}

	/**
	 * Returns true if field need_reply is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetNeed_reply() {
		return EncodingUtils.testBit(__isset_bitfield, __NEED_REPLY_ISSET_ID);
	}

	public void setNeed_replyIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__NEED_REPLY_ISSET_ID, value);
	}

	public String getMessage() {
		return this.message;
	}

	public THermesMessageTask setMessage(String message) {
		this.message = message;
		return this;
	}

	public void unsetMessage() {
		this.message = null;
	}

	/**
	 * Returns true if field message is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetMessage() {
		return this.message != null;
	}

	public void setMessageIsSet(boolean value) {
		if (!value) {
			this.message = null;
		}
	}

	public short getRetry_() {
		return this.retry_;
	}

	public THermesMessageTask setRetry_(short retry_) {
		this.retry_ = retry_;
		setRetry_IsSet(true);
		return this;
	}

	public void unsetRetry_() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__RETRY__ISSET_ID);
	}

	/**
	 * Returns true if field retry_ is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetRetry_() {
		return EncodingUtils.testBit(__isset_bitfield, __RETRY__ISSET_ID);
	}

	public void setRetry_IsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__RETRY__ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ID:
			if (value == null) {
				unsetId();
			} else {
				setId((Long) value);
			}
			break;

		case MASS_SEND:
			if (value == null) {
				unsetMass_send();
			} else {
				setMass_send((Boolean) value);
			}
			break;

		case RECEIVERS:
			if (value == null) {
				unsetReceivers();
			} else {
				setReceivers((String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			} else {
				setStatus((THermesTaskStatus) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreate_time();
			} else {
				setCreate_time((Long) value);
			}
			break;

		case NEED_REPLY:
			if (value == null) {
				unsetNeed_reply();
			} else {
				setNeed_reply((Boolean) value);
			}
			break;

		case MESSAGE:
			if (value == null) {
				unsetMessage();
			} else {
				setMessage((String) value);
			}
			break;

		case RETRY_:
			if (value == null) {
				unsetRetry_();
			} else {
				setRetry_((Short) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ID:
			return Long.valueOf(getId());

		case MASS_SEND:
			return Boolean.valueOf(isMass_send());

		case RECEIVERS:
			return getReceivers();

		case STATUS:
			return getStatus();

		case CREATE_TIME:
			return Long.valueOf(getCreate_time());

		case NEED_REPLY:
			return Boolean.valueOf(isNeed_reply());

		case MESSAGE:
			return getMessage();

		case RETRY_:
			return Short.valueOf(getRetry_());

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ID:
			return isSetId();
		case MASS_SEND:
			return isSetMass_send();
		case RECEIVERS:
			return isSetReceivers();
		case STATUS:
			return isSetStatus();
		case CREATE_TIME:
			return isSetCreate_time();
		case NEED_REPLY:
			return isSetNeed_reply();
		case MESSAGE:
			return isSetMessage();
		case RETRY_:
			return isSetRetry_();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof THermesMessageTask)
			return this.equals((THermesMessageTask) that);
		return false;
	}

	public boolean equals(THermesMessageTask that) {
		if (that == null)
			return false;

		boolean this_present_id = true;
		boolean that_present_id = true;
		if (this_present_id || that_present_id) {
			if (!(this_present_id && that_present_id))
				return false;
			if (this.id != that.id)
				return false;
		}

		boolean this_present_mass_send = true;
		boolean that_present_mass_send = true;
		if (this_present_mass_send || that_present_mass_send) {
			if (!(this_present_mass_send && that_present_mass_send))
				return false;
			if (this.mass_send != that.mass_send)
				return false;
		}

		boolean this_present_receivers = true && this.isSetReceivers();
		boolean that_present_receivers = true && that.isSetReceivers();
		if (this_present_receivers || that_present_receivers) {
			if (!(this_present_receivers && that_present_receivers))
				return false;
			if (!this.receivers.equals(that.receivers))
				return false;
		}

		boolean this_present_status = true && this.isSetStatus();
		boolean that_present_status = true && that.isSetStatus();
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (!this.status.equals(that.status))
				return false;
		}

		boolean this_present_create_time = true;
		boolean that_present_create_time = true;
		if (this_present_create_time || that_present_create_time) {
			if (!(this_present_create_time && that_present_create_time))
				return false;
			if (this.create_time != that.create_time)
				return false;
		}

		boolean this_present_need_reply = true;
		boolean that_present_need_reply = true;
		if (this_present_need_reply || that_present_need_reply) {
			if (!(this_present_need_reply && that_present_need_reply))
				return false;
			if (this.need_reply != that.need_reply)
				return false;
		}

		boolean this_present_message = true && this.isSetMessage();
		boolean that_present_message = true && that.isSetMessage();
		if (this_present_message || that_present_message) {
			if (!(this_present_message && that_present_message))
				return false;
			if (!this.message.equals(that.message))
				return false;
		}

		boolean this_present_retry_ = true && this.isSetRetry_();
		boolean that_present_retry_ = true && that.isSetRetry_();
		if (this_present_retry_ || that_present_retry_) {
			if (!(this_present_retry_ && that_present_retry_))
				return false;
			if (this.retry_ != that.retry_)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_id = true;
		list.add(present_id);
		if (present_id)
			list.add(id);

		boolean present_mass_send = true;
		list.add(present_mass_send);
		if (present_mass_send)
			list.add(mass_send);

		boolean present_receivers = true && (isSetReceivers());
		list.add(present_receivers);
		if (present_receivers)
			list.add(receivers);

		boolean present_status = true && (isSetStatus());
		list.add(present_status);
		if (present_status)
			list.add(status.getValue());

		boolean present_create_time = true;
		list.add(present_create_time);
		if (present_create_time)
			list.add(create_time);

		boolean present_need_reply = true;
		list.add(present_need_reply);
		if (present_need_reply)
			list.add(need_reply);

		boolean present_message = true && (isSetMessage());
		list.add(present_message);
		if (present_message)
			list.add(message);

		boolean present_retry_ = true && (isSetRetry_());
		list.add(present_retry_);
		if (present_retry_)
			list.add(retry_);

		return list.hashCode();
	}

	public int compareTo(THermesMessageTask other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id,
					other.id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMass_send()).compareTo(
				other.isSetMass_send());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMass_send()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.mass_send, other.mass_send);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetReceivers()).compareTo(
				other.isSetReceivers());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReceivers()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.receivers, other.receivers);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStatus()).compareTo(
				other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(
				other.isSetCreate_time());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreate_time()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.create_time, other.create_time);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNeed_reply()).compareTo(
				other.isSetNeed_reply());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNeed_reply()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.need_reply, other.need_reply);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMessage()).compareTo(
				other.isSetMessage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMessage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.message, other.message);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRetry_()).compareTo(
				other.isSetRetry_());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRetry_()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.retry_, other.retry_);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("THermesMessageTask(");
		boolean first = true;

		sb.append("id:");
		sb.append(this.id);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("mass_send:");
		sb.append(this.mass_send);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("receivers:");
		if (this.receivers == null) {
			sb.append("null");
		} else {
			sb.append(this.receivers);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		if (this.status == null) {
			sb.append("null");
		} else {
			sb.append(this.status);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("create_time:");
		sb.append(this.create_time);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("need_reply:");
		sb.append(this.need_reply);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("message:");
		if (this.message == null) {
			sb.append("null");
		} else {
			sb.append(this.message);
		}
		first = false;
		if (isSetRetry_()) {
			if (!first)
				sb.append(", ");
			sb.append("retry_:");
			sb.append(this.retry_);
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// alas, we cannot check 'id' because it's a primitive and you chose the
		// non-beans generator.
		// alas, we cannot check 'mass_send' because it's a primitive and you
		// chose the non-beans generator.
		if (receivers == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'receivers' was not present! Struct: "
							+ toString());
		}
		if (status == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'status' was not present! Struct: "
							+ toString());
		}
		// alas, we cannot check 'create_time' because it's a primitive and you
		// chose the non-beans generator.
		// alas, we cannot check 'need_reply' because it's a primitive and you
		// chose the non-beans generator.
		if (message == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'message' was not present! Struct: "
							+ toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class THermesMessageTaskStandardSchemeFactory implements
			SchemeFactory {
		public THermesMessageTaskStandardScheme getScheme() {
			return new THermesMessageTaskStandardScheme();
		}
	}

	private static class THermesMessageTaskStandardScheme extends
			StandardScheme<THermesMessageTask> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				THermesMessageTask struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.id = iprot.readI64();
						struct.setIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // MASS_SEND
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.mass_send = iprot.readBool();
						struct.setMass_sendIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 3: // RECEIVERS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.receivers = iprot.readString();
						struct.setReceiversIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 4: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = THermesTaskStatus.findByValue(iprot
								.readI32());
						struct.setStatusIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 5: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.create_time = iprot.readI64();
						struct.setCreate_timeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 6: // NEED_REPLY
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.need_reply = iprot.readBool();
						struct.setNeed_replyIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 7: // MESSAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.message = iprot.readString();
						struct.setMessageIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 8: // RETRY_
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.retry_ = iprot.readI16();
						struct.setRetry_IsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			if (!struct.isSetId()) {
				throw new org.apache.thrift.protocol.TProtocolException(
						"Required field 'id' was not found in serialized data! Struct: "
								+ toString());
			}
			if (!struct.isSetMass_send()) {
				throw new org.apache.thrift.protocol.TProtocolException(
						"Required field 'mass_send' was not found in serialized data! Struct: "
								+ toString());
			}
			if (!struct.isSetCreate_time()) {
				throw new org.apache.thrift.protocol.TProtocolException(
						"Required field 'create_time' was not found in serialized data! Struct: "
								+ toString());
			}
			if (!struct.isSetNeed_reply()) {
				throw new org.apache.thrift.protocol.TProtocolException(
						"Required field 'need_reply' was not found in serialized data! Struct: "
								+ toString());
			}
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				THermesMessageTask struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ID_FIELD_DESC);
			oprot.writeI64(struct.id);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MASS_SEND_FIELD_DESC);
			oprot.writeBool(struct.mass_send);
			oprot.writeFieldEnd();
			if (struct.receivers != null) {
				oprot.writeFieldBegin(RECEIVERS_FIELD_DESC);
				oprot.writeString(struct.receivers);
				oprot.writeFieldEnd();
			}
			if (struct.status != null) {
				oprot.writeFieldBegin(STATUS_FIELD_DESC);
				oprot.writeI32(struct.status.getValue());
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
			oprot.writeI64(struct.create_time);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NEED_REPLY_FIELD_DESC);
			oprot.writeBool(struct.need_reply);
			oprot.writeFieldEnd();
			if (struct.message != null) {
				oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
				oprot.writeString(struct.message);
				oprot.writeFieldEnd();
			}
			if (struct.isSetRetry_()) {
				oprot.writeFieldBegin(RETRY__FIELD_DESC);
				oprot.writeI16(struct.retry_);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class THermesMessageTaskTupleSchemeFactory implements
			SchemeFactory {
		public THermesMessageTaskTupleScheme getScheme() {
			return new THermesMessageTaskTupleScheme();
		}
	}

	private static class THermesMessageTaskTupleScheme extends
			TupleScheme<THermesMessageTask> {

		public void write(org.apache.thrift.protocol.TProtocol prot,
				THermesMessageTask struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeI64(struct.id);
			oprot.writeBool(struct.mass_send);
			oprot.writeString(struct.receivers);
			oprot.writeI32(struct.status.getValue());
			oprot.writeI64(struct.create_time);
			oprot.writeBool(struct.need_reply);
			oprot.writeString(struct.message);
			BitSet optionals = new BitSet();
			if (struct.isSetRetry_()) {
				optionals.set(0);
			}
			oprot.writeBitSet(optionals, 1);
			if (struct.isSetRetry_()) {
				oprot.writeI16(struct.retry_);
			}
		}

		public void read(org.apache.thrift.protocol.TProtocol prot,
				THermesMessageTask struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.id = iprot.readI64();
			struct.setIdIsSet(true);
			struct.mass_send = iprot.readBool();
			struct.setMass_sendIsSet(true);
			struct.receivers = iprot.readString();
			struct.setReceiversIsSet(true);
			struct.status = THermesTaskStatus.findByValue(iprot.readI32());
			struct.setStatusIsSet(true);
			struct.create_time = iprot.readI64();
			struct.setCreate_timeIsSet(true);
			struct.need_reply = iprot.readBool();
			struct.setNeed_replyIsSet(true);
			struct.message = iprot.readString();
			struct.setMessageIsSet(true);
			BitSet incoming = iprot.readBitSet(1);
			if (incoming.get(0)) {
				struct.retry_ = iprot.readI16();
				struct.setRetry_IsSet(true);
			}
		}
	}

}
