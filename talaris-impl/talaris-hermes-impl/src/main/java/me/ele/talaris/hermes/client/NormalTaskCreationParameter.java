package me.ele.talaris.hermes.client;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-22")
public class NormalTaskCreationParameter
		implements
		org.apache.thrift.TBase<NormalTaskCreationParameter, NormalTaskCreationParameter._Fields>,
		java.io.Serializable, Cloneable,
		Comparable<NormalTaskCreationParameter> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"NormalTaskCreationParameter");

	private static final org.apache.thrift.protocol.TField RECEIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"receivers", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"message", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField SENDER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"sender_key", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField NEED_REPLY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"need_reply", org.apache.thrift.protocol.TType.BOOL, (short) 4);
	private static final org.apache.thrift.protocol.TField RETRY__FIELD_DESC = new org.apache.thrift.protocol.TField(
			"retry_", org.apache.thrift.protocol.TType.I16, (short) 5);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class,
				new NormalTaskCreationParameterStandardSchemeFactory());
		schemes.put(TupleScheme.class,
				new NormalTaskCreationParameterTupleSchemeFactory());
	}

	public String receivers; // required
	public String message; // required
	public String sender_key; // required
	public boolean need_reply; // optional
	public short retry_; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		RECEIVERS((short) 1, "receivers"), MESSAGE((short) 2, "message"), SENDER_KEY(
				(short) 3, "sender_key"), NEED_REPLY((short) 4, "need_reply"), RETRY_(
				(short) 5, "retry_");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // RECEIVERS
				return RECEIVERS;
			case 2: // MESSAGE
				return MESSAGE;
			case 3: // SENDER_KEY
				return SENDER_KEY;
			case 4: // NEED_REPLY
				return NEED_REPLY;
			case 5: // RETRY_
				return RETRY_;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __NEED_REPLY_ISSET_ID = 0;
	private static final int __RETRY__ISSET_ID = 1;
	private byte __isset_bitfield = 0;
	private static final _Fields optionals[] = { _Fields.NEED_REPLY,
			_Fields.RETRY_ };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.RECEIVERS,
				new org.apache.thrift.meta_data.FieldMetaData("receivers",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MESSAGE,
				new org.apache.thrift.meta_data.FieldMetaData("message",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SENDER_KEY,
				new org.apache.thrift.meta_data.FieldMetaData("sender_key",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NEED_REPLY,
				new org.apache.thrift.meta_data.FieldMetaData("need_reply",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.RETRY_,
				new org.apache.thrift.meta_data.FieldMetaData("retry_",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I16)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				NormalTaskCreationParameter.class, metaDataMap);
	}

	public NormalTaskCreationParameter() {
	}

	public NormalTaskCreationParameter(String receivers, String message,
			String sender_key) {
		this();
		this.receivers = receivers;
		this.message = message;
		this.sender_key = sender_key;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public NormalTaskCreationParameter(NormalTaskCreationParameter other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetReceivers()) {
			this.receivers = other.receivers;
		}
		if (other.isSetMessage()) {
			this.message = other.message;
		}
		if (other.isSetSender_key()) {
			this.sender_key = other.sender_key;
		}
		this.need_reply = other.need_reply;
		this.retry_ = other.retry_;
	}

	public NormalTaskCreationParameter deepCopy() {
		return new NormalTaskCreationParameter(this);
	}

	public void clear() {
		this.receivers = null;
		this.message = null;
		this.sender_key = null;
		setNeed_replyIsSet(false);
		this.need_reply = false;
		setRetry_IsSet(false);
		this.retry_ = 0;
	}

	public String getReceivers() {
		return this.receivers;
	}

	public NormalTaskCreationParameter setReceivers(String receivers) {
		this.receivers = receivers;
		return this;
	}

	public void unsetReceivers() {
		this.receivers = null;
	}

	/**
	 * Returns true if field receivers is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetReceivers() {
		return this.receivers != null;
	}

	public void setReceiversIsSet(boolean value) {
		if (!value) {
			this.receivers = null;
		}
	}

	public String getMessage() {
		return this.message;
	}

	public NormalTaskCreationParameter setMessage(String message) {
		this.message = message;
		return this;
	}

	public void unsetMessage() {
		this.message = null;
	}

	/**
	 * Returns true if field message is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetMessage() {
		return this.message != null;
	}

	public void setMessageIsSet(boolean value) {
		if (!value) {
			this.message = null;
		}
	}

	public String getSender_key() {
		return this.sender_key;
	}

	public NormalTaskCreationParameter setSender_key(String sender_key) {
		this.sender_key = sender_key;
		return this;
	}

	public void unsetSender_key() {
		this.sender_key = null;
	}

	/**
	 * Returns true if field sender_key is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetSender_key() {
		return this.sender_key != null;
	}

	public void setSender_keyIsSet(boolean value) {
		if (!value) {
			this.sender_key = null;
		}
	}

	public boolean isNeed_reply() {
		return this.need_reply;
	}

	public NormalTaskCreationParameter setNeed_reply(boolean need_reply) {
		this.need_reply = need_reply;
		setNeed_replyIsSet(true);
		return this;
	}

	public void unsetNeed_reply() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__NEED_REPLY_ISSET_ID);
	}

	/**
	 * Returns true if field need_reply is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetNeed_reply() {
		return EncodingUtils.testBit(__isset_bitfield, __NEED_REPLY_ISSET_ID);
	}

	public void setNeed_replyIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__NEED_REPLY_ISSET_ID, value);
	}

	public short getRetry_() {
		return this.retry_;
	}

	public NormalTaskCreationParameter setRetry_(short retry_) {
		this.retry_ = retry_;
		setRetry_IsSet(true);
		return this;
	}

	public void unsetRetry_() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__RETRY__ISSET_ID);
	}

	/**
	 * Returns true if field retry_ is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetRetry_() {
		return EncodingUtils.testBit(__isset_bitfield, __RETRY__ISSET_ID);
	}

	public void setRetry_IsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__RETRY__ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case RECEIVERS:
			if (value == null) {
				unsetReceivers();
			} else {
				setReceivers((String) value);
			}
			break;

		case MESSAGE:
			if (value == null) {
				unsetMessage();
			} else {
				setMessage((String) value);
			}
			break;

		case SENDER_KEY:
			if (value == null) {
				unsetSender_key();
			} else {
				setSender_key((String) value);
			}
			break;

		case NEED_REPLY:
			if (value == null) {
				unsetNeed_reply();
			} else {
				setNeed_reply((Boolean) value);
			}
			break;

		case RETRY_:
			if (value == null) {
				unsetRetry_();
			} else {
				setRetry_((Short) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case RECEIVERS:
			return getReceivers();

		case MESSAGE:
			return getMessage();

		case SENDER_KEY:
			return getSender_key();

		case NEED_REPLY:
			return Boolean.valueOf(isNeed_reply());

		case RETRY_:
			return Short.valueOf(getRetry_());

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case RECEIVERS:
			return isSetReceivers();
		case MESSAGE:
			return isSetMessage();
		case SENDER_KEY:
			return isSetSender_key();
		case NEED_REPLY:
			return isSetNeed_reply();
		case RETRY_:
			return isSetRetry_();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof NormalTaskCreationParameter)
			return this.equals((NormalTaskCreationParameter) that);
		return false;
	}

	public boolean equals(NormalTaskCreationParameter that) {
		if (that == null)
			return false;

		boolean this_present_receivers = true && this.isSetReceivers();
		boolean that_present_receivers = true && that.isSetReceivers();
		if (this_present_receivers || that_present_receivers) {
			if (!(this_present_receivers && that_present_receivers))
				return false;
			if (!this.receivers.equals(that.receivers))
				return false;
		}

		boolean this_present_message = true && this.isSetMessage();
		boolean that_present_message = true && that.isSetMessage();
		if (this_present_message || that_present_message) {
			if (!(this_present_message && that_present_message))
				return false;
			if (!this.message.equals(that.message))
				return false;
		}

		boolean this_present_sender_key = true && this.isSetSender_key();
		boolean that_present_sender_key = true && that.isSetSender_key();
		if (this_present_sender_key || that_present_sender_key) {
			if (!(this_present_sender_key && that_present_sender_key))
				return false;
			if (!this.sender_key.equals(that.sender_key))
				return false;
		}

		boolean this_present_need_reply = true && this.isSetNeed_reply();
		boolean that_present_need_reply = true && that.isSetNeed_reply();
		if (this_present_need_reply || that_present_need_reply) {
			if (!(this_present_need_reply && that_present_need_reply))
				return false;
			if (this.need_reply != that.need_reply)
				return false;
		}

		boolean this_present_retry_ = true && this.isSetRetry_();
		boolean that_present_retry_ = true && that.isSetRetry_();
		if (this_present_retry_ || that_present_retry_) {
			if (!(this_present_retry_ && that_present_retry_))
				return false;
			if (this.retry_ != that.retry_)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_receivers = true && (isSetReceivers());
		list.add(present_receivers);
		if (present_receivers)
			list.add(receivers);

		boolean present_message = true && (isSetMessage());
		list.add(present_message);
		if (present_message)
			list.add(message);

		boolean present_sender_key = true && (isSetSender_key());
		list.add(present_sender_key);
		if (present_sender_key)
			list.add(sender_key);

		boolean present_need_reply = true && (isSetNeed_reply());
		list.add(present_need_reply);
		if (present_need_reply)
			list.add(need_reply);

		boolean present_retry_ = true && (isSetRetry_());
		list.add(present_retry_);
		if (present_retry_)
			list.add(retry_);

		return list.hashCode();
	}

	public int compareTo(NormalTaskCreationParameter other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetReceivers()).compareTo(
				other.isSetReceivers());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReceivers()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.receivers, other.receivers);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMessage()).compareTo(
				other.isSetMessage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMessage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.message, other.message);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetSender_key()).compareTo(
				other.isSetSender_key());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSender_key()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.sender_key, other.sender_key);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNeed_reply()).compareTo(
				other.isSetNeed_reply());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNeed_reply()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.need_reply, other.need_reply);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRetry_()).compareTo(
				other.isSetRetry_());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRetry_()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.retry_, other.retry_);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("NormalTaskCreationParameter(");
		boolean first = true;

		sb.append("receivers:");
		if (this.receivers == null) {
			sb.append("null");
		} else {
			sb.append(this.receivers);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("message:");
		if (this.message == null) {
			sb.append("null");
		} else {
			sb.append(this.message);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sender_key:");
		if (this.sender_key == null) {
			sb.append("null");
		} else {
			sb.append(this.sender_key);
		}
		first = false;
		if (isSetNeed_reply()) {
			if (!first)
				sb.append(", ");
			sb.append("need_reply:");
			sb.append(this.need_reply);
			first = false;
		}
		if (isSetRetry_()) {
			if (!first)
				sb.append(", ");
			sb.append("retry_:");
			sb.append(this.retry_);
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (receivers == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'receivers' was not present! Struct: "
							+ toString());
		}
		if (message == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'message' was not present! Struct: "
							+ toString());
		}
		if (sender_key == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'sender_key' was not present! Struct: "
							+ toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class NormalTaskCreationParameterStandardSchemeFactory
			implements SchemeFactory {
		public NormalTaskCreationParameterStandardScheme getScheme() {
			return new NormalTaskCreationParameterStandardScheme();
		}
	}

	private static class NormalTaskCreationParameterStandardScheme extends
			StandardScheme<NormalTaskCreationParameter> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				NormalTaskCreationParameter struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // RECEIVERS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.receivers = iprot.readString();
						struct.setReceiversIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // MESSAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.message = iprot.readString();
						struct.setMessageIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 3: // SENDER_KEY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sender_key = iprot.readString();
						struct.setSender_keyIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 4: // NEED_REPLY
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.need_reply = iprot.readBool();
						struct.setNeed_replyIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 5: // RETRY_
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.retry_ = iprot.readI16();
						struct.setRetry_IsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				NormalTaskCreationParameter struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.receivers != null) {
				oprot.writeFieldBegin(RECEIVERS_FIELD_DESC);
				oprot.writeString(struct.receivers);
				oprot.writeFieldEnd();
			}
			if (struct.message != null) {
				oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
				oprot.writeString(struct.message);
				oprot.writeFieldEnd();
			}
			if (struct.sender_key != null) {
				oprot.writeFieldBegin(SENDER_KEY_FIELD_DESC);
				oprot.writeString(struct.sender_key);
				oprot.writeFieldEnd();
			}
			if (struct.isSetNeed_reply()) {
				oprot.writeFieldBegin(NEED_REPLY_FIELD_DESC);
				oprot.writeBool(struct.need_reply);
				oprot.writeFieldEnd();
			}
			if (struct.isSetRetry_()) {
				oprot.writeFieldBegin(RETRY__FIELD_DESC);
				oprot.writeI16(struct.retry_);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class NormalTaskCreationParameterTupleSchemeFactory
			implements SchemeFactory {
		public NormalTaskCreationParameterTupleScheme getScheme() {
			return new NormalTaskCreationParameterTupleScheme();
		}
	}

	private static class NormalTaskCreationParameterTupleScheme extends
			TupleScheme<NormalTaskCreationParameter> {

		public void write(org.apache.thrift.protocol.TProtocol prot,
				NormalTaskCreationParameter struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.receivers);
			oprot.writeString(struct.message);
			oprot.writeString(struct.sender_key);
			BitSet optionals = new BitSet();
			if (struct.isSetNeed_reply()) {
				optionals.set(0);
			}
			if (struct.isSetRetry_()) {
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetNeed_reply()) {
				oprot.writeBool(struct.need_reply);
			}
			if (struct.isSetRetry_()) {
				oprot.writeI16(struct.retry_);
			}
		}

		public void read(org.apache.thrift.protocol.TProtocol prot,
				NormalTaskCreationParameter struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.receivers = iprot.readString();
			struct.setReceiversIsSet(true);
			struct.message = iprot.readString();
			struct.setMessageIsSet(true);
			struct.sender_key = iprot.readString();
			struct.setSender_keyIsSet(true);
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
				struct.need_reply = iprot.readBool();
				struct.setNeed_replyIsSet(true);
			}
			if (incoming.get(1)) {
				struct.retry_ = iprot.readI16();
				struct.setRetry_IsSet(true);
			}
		}
	}

}
