package me.ele.talaris.hermes.client;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-22")
public class HermesService {

	/**
	 * Services
	 */
	public interface Iface {

		public boolean ping() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException;

		public boolean system_check() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException;

		public String create_sender(SenderCreationParameter param)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

		public long create_sms_template(String template_content,
				String template_params, String template_slug)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

		public THermesTemplateVerifyStatus get_sms_template_verify_status(
				String template_slug) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException;

		public long create_task(NormalTaskCreationParameter param)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

		public long create_template_task(TemplateTaskCreationParameter param)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

		public long create_audio_task(AudioTaskCreationParameter param)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

		public Map<Long, THermesTaskStatus> get_task_status(List<Long> task_ids)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

		public List<THermesUserReply> get_user_reply(String phone_number,
				long timestamp) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException;

		public VerifyCodeCreationResult verify_code_create(
				VerifyCodeCreationParameter param) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException;

		public boolean verify_code_validate(String hash_value,
				String verify_code_to_validate) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException;

		public boolean validate_verify_code_with_hash(String sender_key,
				String hash_value, String verify_code_to_validate)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

		public boolean validate_verify_code_with_receiver(String sender_key,
				String receiver, String verify_code_to_validate)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

		public boolean validated_within_n_minutes(String sender_key,
				String receiver, long minutes) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException;

		public List<THermesVerifyCodeQueryResult> query_sent_verify_code(
				String receiver, short limit) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException;

		public List<THermesSMSTaskQueryResult> query_sms_task(String receiver,
				short limit) throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

		public long get_template_id_by_slug(String slug)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void ping(
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void system_check(
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void create_sender(SenderCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void create_sms_template(String template_content,
				String template_params, String template_slug,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void get_sms_template_verify_status(String template_slug,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void create_task(NormalTaskCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void create_template_task(TemplateTaskCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void create_audio_task(AudioTaskCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void get_task_status(List<Long> task_ids,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void get_user_reply(String phone_number, long timestamp,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void verify_code_create(VerifyCodeCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void verify_code_validate(String hash_value,
				String verify_code_to_validate,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void validate_verify_code_with_hash(String sender_key,
				String hash_value, String verify_code_to_validate,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void validate_verify_code_with_receiver(String sender_key,
				String receiver, String verify_code_to_validate,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void validated_within_n_minutes(String sender_key,
				String receiver, long minutes,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void query_sent_verify_code(String receiver, short limit,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void query_sms_task(String receiver, short limit,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void get_template_id_by_slug(String slug,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient
			implements Iface {
		public static class Factory implements
				org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public boolean ping() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			send_ping();
			return recv_ping();
		}

		public void send_ping() throws org.apache.thrift.TException {
			ping_args args = new ping_args();
			sendBase("ping", args);
		}

		public boolean recv_ping() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			ping_result result = new ping_result();
			receiveBase(result, "ping");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"ping failed: unknown result");
		}

		public boolean system_check() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			send_system_check();
			return recv_system_check();
		}

		public void send_system_check() throws org.apache.thrift.TException {
			system_check_args args = new system_check_args();
			sendBase("system_check", args);
		}

		public boolean recv_system_check() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			system_check_result result = new system_check_result();
			receiveBase(result, "system_check");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"system_check failed: unknown result");
		}

		public String create_sender(SenderCreationParameter param)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_create_sender(param);
			return recv_create_sender();
		}

		public void send_create_sender(SenderCreationParameter param)
				throws org.apache.thrift.TException {
			create_sender_args args = new create_sender_args();
			args.setParam(param);
			sendBase("create_sender", args);
		}

		public String recv_create_sender() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			create_sender_result result = new create_sender_result();
			receiveBase(result, "create_sender");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"create_sender failed: unknown result");
		}

		public long create_sms_template(String template_content,
				String template_params, String template_slug)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_create_sms_template(template_content, template_params,
					template_slug);
			return recv_create_sms_template();
		}

		public void send_create_sms_template(String template_content,
				String template_params, String template_slug)
				throws org.apache.thrift.TException {
			create_sms_template_args args = new create_sms_template_args();
			args.setTemplate_content(template_content);
			args.setTemplate_params(template_params);
			args.setTemplate_slug(template_slug);
			sendBase("create_sms_template", args);
		}

		public long recv_create_sms_template() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			create_sms_template_result result = new create_sms_template_result();
			receiveBase(result, "create_sms_template");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"create_sms_template failed: unknown result");
		}

		public THermesTemplateVerifyStatus get_sms_template_verify_status(
				String template_slug) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			send_get_sms_template_verify_status(template_slug);
			return recv_get_sms_template_verify_status();
		}

		public void send_get_sms_template_verify_status(String template_slug)
				throws org.apache.thrift.TException {
			get_sms_template_verify_status_args args = new get_sms_template_verify_status_args();
			args.setTemplate_slug(template_slug);
			sendBase("get_sms_template_verify_status", args);
		}

		public THermesTemplateVerifyStatus recv_get_sms_template_verify_status()
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			get_sms_template_verify_status_result result = new get_sms_template_verify_status_result();
			receiveBase(result, "get_sms_template_verify_status");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"get_sms_template_verify_status failed: unknown result");
		}

		public long create_task(NormalTaskCreationParameter param)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_create_task(param);
			return recv_create_task();
		}

		public void send_create_task(NormalTaskCreationParameter param)
				throws org.apache.thrift.TException {
			create_task_args args = new create_task_args();
			args.setParam(param);
			sendBase("create_task", args);
		}

		public long recv_create_task() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			create_task_result result = new create_task_result();
			receiveBase(result, "create_task");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"create_task failed: unknown result");
		}

		public long create_template_task(TemplateTaskCreationParameter param)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_create_template_task(param);
			return recv_create_template_task();
		}

		public void send_create_template_task(
				TemplateTaskCreationParameter param)
				throws org.apache.thrift.TException {
			create_template_task_args args = new create_template_task_args();
			args.setParam(param);
			sendBase("create_template_task", args);
		}

		public long recv_create_template_task() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			create_template_task_result result = new create_template_task_result();
			receiveBase(result, "create_template_task");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"create_template_task failed: unknown result");
		}

		public long create_audio_task(AudioTaskCreationParameter param)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_create_audio_task(param);
			return recv_create_audio_task();
		}

		public void send_create_audio_task(AudioTaskCreationParameter param)
				throws org.apache.thrift.TException {
			create_audio_task_args args = new create_audio_task_args();
			args.setParam(param);
			sendBase("create_audio_task", args);
		}

		public long recv_create_audio_task() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			create_audio_task_result result = new create_audio_task_result();
			receiveBase(result, "create_audio_task");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"create_audio_task failed: unknown result");
		}

		public Map<Long, THermesTaskStatus> get_task_status(List<Long> task_ids)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_get_task_status(task_ids);
			return recv_get_task_status();
		}

		public void send_get_task_status(List<Long> task_ids)
				throws org.apache.thrift.TException {
			get_task_status_args args = new get_task_status_args();
			args.setTask_ids(task_ids);
			sendBase("get_task_status", args);
		}

		public Map<Long, THermesTaskStatus> recv_get_task_status()
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			get_task_status_result result = new get_task_status_result();
			receiveBase(result, "get_task_status");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"get_task_status failed: unknown result");
		}

		public List<THermesUserReply> get_user_reply(String phone_number,
				long timestamp) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			send_get_user_reply(phone_number, timestamp);
			return recv_get_user_reply();
		}

		public void send_get_user_reply(String phone_number, long timestamp)
				throws org.apache.thrift.TException {
			get_user_reply_args args = new get_user_reply_args();
			args.setPhone_number(phone_number);
			args.setTimestamp(timestamp);
			sendBase("get_user_reply", args);
		}

		public List<THermesUserReply> recv_get_user_reply()
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			get_user_reply_result result = new get_user_reply_result();
			receiveBase(result, "get_user_reply");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"get_user_reply failed: unknown result");
		}

		public VerifyCodeCreationResult verify_code_create(
				VerifyCodeCreationParameter param) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			send_verify_code_create(param);
			return recv_verify_code_create();
		}

		public void send_verify_code_create(VerifyCodeCreationParameter param)
				throws org.apache.thrift.TException {
			verify_code_create_args args = new verify_code_create_args();
			args.setParam(param);
			sendBase("verify_code_create", args);
		}

		public VerifyCodeCreationResult recv_verify_code_create()
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			verify_code_create_result result = new verify_code_create_result();
			receiveBase(result, "verify_code_create");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"verify_code_create failed: unknown result");
		}

		public boolean verify_code_validate(String hash_value,
				String verify_code_to_validate) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			send_verify_code_validate(hash_value, verify_code_to_validate);
			return recv_verify_code_validate();
		}

		public void send_verify_code_validate(String hash_value,
				String verify_code_to_validate)
				throws org.apache.thrift.TException {
			verify_code_validate_args args = new verify_code_validate_args();
			args.setHash_value(hash_value);
			args.setVerify_code_to_validate(verify_code_to_validate);
			sendBase("verify_code_validate", args);
		}

		public boolean recv_verify_code_validate() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			verify_code_validate_result result = new verify_code_validate_result();
			receiveBase(result, "verify_code_validate");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"verify_code_validate failed: unknown result");
		}

		public boolean validate_verify_code_with_hash(String sender_key,
				String hash_value, String verify_code_to_validate)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_validate_verify_code_with_hash(sender_key, hash_value,
					verify_code_to_validate);
			return recv_validate_verify_code_with_hash();
		}

		public void send_validate_verify_code_with_hash(String sender_key,
				String hash_value, String verify_code_to_validate)
				throws org.apache.thrift.TException {
			validate_verify_code_with_hash_args args = new validate_verify_code_with_hash_args();
			args.setSender_key(sender_key);
			args.setHash_value(hash_value);
			args.setVerify_code_to_validate(verify_code_to_validate);
			sendBase("validate_verify_code_with_hash", args);
		}

		public boolean recv_validate_verify_code_with_hash()
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			validate_verify_code_with_hash_result result = new validate_verify_code_with_hash_result();
			receiveBase(result, "validate_verify_code_with_hash");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"validate_verify_code_with_hash failed: unknown result");
		}

		public boolean validate_verify_code_with_receiver(String sender_key,
				String receiver, String verify_code_to_validate)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_validate_verify_code_with_receiver(sender_key, receiver,
					verify_code_to_validate);
			return recv_validate_verify_code_with_receiver();
		}

		public void send_validate_verify_code_with_receiver(String sender_key,
				String receiver, String verify_code_to_validate)
				throws org.apache.thrift.TException {
			validate_verify_code_with_receiver_args args = new validate_verify_code_with_receiver_args();
			args.setSender_key(sender_key);
			args.setReceiver(receiver);
			args.setVerify_code_to_validate(verify_code_to_validate);
			sendBase("validate_verify_code_with_receiver", args);
		}

		public boolean recv_validate_verify_code_with_receiver()
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			validate_verify_code_with_receiver_result result = new validate_verify_code_with_receiver_result();
			receiveBase(result, "validate_verify_code_with_receiver");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"validate_verify_code_with_receiver failed: unknown result");
		}

		public boolean validated_within_n_minutes(String sender_key,
				String receiver, long minutes) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			send_validated_within_n_minutes(sender_key, receiver, minutes);
			return recv_validated_within_n_minutes();
		}

		public void send_validated_within_n_minutes(String sender_key,
				String receiver, long minutes)
				throws org.apache.thrift.TException {
			validated_within_n_minutes_args args = new validated_within_n_minutes_args();
			args.setSender_key(sender_key);
			args.setReceiver(receiver);
			args.setMinutes(minutes);
			sendBase("validated_within_n_minutes", args);
		}

		public boolean recv_validated_within_n_minutes()
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			validated_within_n_minutes_result result = new validated_within_n_minutes_result();
			receiveBase(result, "validated_within_n_minutes");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"validated_within_n_minutes failed: unknown result");
		}

		public List<THermesVerifyCodeQueryResult> query_sent_verify_code(
				String receiver, short limit) throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			send_query_sent_verify_code(receiver, limit);
			return recv_query_sent_verify_code();
		}

		public void send_query_sent_verify_code(String receiver, short limit)
				throws org.apache.thrift.TException {
			query_sent_verify_code_args args = new query_sent_verify_code_args();
			args.setReceiver(receiver);
			args.setLimit(limit);
			sendBase("query_sent_verify_code", args);
		}

		public List<THermesVerifyCodeQueryResult> recv_query_sent_verify_code()
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			query_sent_verify_code_result result = new query_sent_verify_code_result();
			receiveBase(result, "query_sent_verify_code");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"query_sent_verify_code failed: unknown result");
		}

		public List<THermesSMSTaskQueryResult> query_sms_task(String receiver,
				short limit) throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_query_sms_task(receiver, limit);
			return recv_query_sms_task();
		}

		public void send_query_sms_task(String receiver, short limit)
				throws org.apache.thrift.TException {
			query_sms_task_args args = new query_sms_task_args();
			args.setReceiver(receiver);
			args.setLimit(limit);
			sendBase("query_sms_task", args);
		}

		public List<THermesSMSTaskQueryResult> recv_query_sms_task()
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			query_sms_task_result result = new query_sms_task_result();
			receiveBase(result, "query_sms_task");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"query_sms_task failed: unknown result");
		}

		public long get_template_id_by_slug(String slug)
				throws HermesUserException, HermesSystemException,
				HermesUnknownException, org.apache.thrift.TException {
			send_get_template_id_by_slug(slug);
			return recv_get_template_id_by_slug();
		}

		public void send_get_template_id_by_slug(String slug)
				throws org.apache.thrift.TException {
			get_template_id_by_slug_args args = new get_template_id_by_slug_args();
			args.setSlug(slug);
			sendBase("get_template_id_by_slug", args);
		}

		public long recv_get_template_id_by_slug() throws HermesUserException,
				HermesSystemException, HermesUnknownException,
				org.apache.thrift.TException {
			get_template_id_by_slug_result result = new get_template_id_by_slug_result();
			receiveBase(result, "get_template_id_by_slug");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.user_exception != null) {
				throw result.user_exception;
			}
			if (result.system_exception != null) {
				throw result.system_exception;
			}
			if (result.unknown_exception != null) {
				throw result.unknown_exception;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"get_template_id_by_slug failed: unknown result");
		}

	}

	public static class AsyncClient extends
			org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements
				org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(
					org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager,
						transport);
			}
		}

		public AsyncClient(
				org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void ping(
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			ping_call method_call = new ping_call(resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class ping_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			public ping_call(
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
				ping_args args = new ping_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_ping();
			}
		}

		public void system_check(
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			system_check_call method_call = new system_check_call(
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class system_check_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			public system_check_call(
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"system_check",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				system_check_args args = new system_check_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_system_check();
			}
		}

		public void create_sender(SenderCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			create_sender_call method_call = new create_sender_call(param,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class create_sender_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private SenderCreationParameter param;

			public create_sender_call(
					SenderCreationParameter param,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.param = param;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"create_sender",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				create_sender_args args = new create_sender_args();
				args.setParam(param);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_create_sender();
			}
		}

		public void create_sms_template(String template_content,
				String template_params, String template_slug,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			create_sms_template_call method_call = new create_sms_template_call(
					template_content, template_params, template_slug,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class create_sms_template_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String template_content;
			private String template_params;
			private String template_slug;

			public create_sms_template_call(
					String template_content,
					String template_params,
					String template_slug,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.template_content = template_content;
				this.template_params = template_params;
				this.template_slug = template_slug;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"create_sms_template",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				create_sms_template_args args = new create_sms_template_args();
				args.setTemplate_content(template_content);
				args.setTemplate_params(template_params);
				args.setTemplate_slug(template_slug);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public long getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_create_sms_template();
			}
		}

		public void get_sms_template_verify_status(String template_slug,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			get_sms_template_verify_status_call method_call = new get_sms_template_verify_status_call(
					template_slug, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class get_sms_template_verify_status_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String template_slug;

			public get_sms_template_verify_status_call(
					String template_slug,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.template_slug = template_slug;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"get_sms_template_verify_status",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				get_sms_template_verify_status_args args = new get_sms_template_verify_status_args();
				args.setTemplate_slug(template_slug);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public THermesTemplateVerifyStatus getResult()
					throws HermesUserException, HermesSystemException,
					HermesUnknownException, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_get_sms_template_verify_status();
			}
		}

		public void create_task(NormalTaskCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			create_task_call method_call = new create_task_call(param,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class create_task_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private NormalTaskCreationParameter param;

			public create_task_call(
					NormalTaskCreationParameter param,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.param = param;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"create_task",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				create_task_args args = new create_task_args();
				args.setParam(param);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public long getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_create_task();
			}
		}

		public void create_template_task(TemplateTaskCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			create_template_task_call method_call = new create_template_task_call(
					param, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class create_template_task_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private TemplateTaskCreationParameter param;

			public create_template_task_call(
					TemplateTaskCreationParameter param,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.param = param;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"create_template_task",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				create_template_task_args args = new create_template_task_args();
				args.setParam(param);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public long getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_create_template_task();
			}
		}

		public void create_audio_task(AudioTaskCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			create_audio_task_call method_call = new create_audio_task_call(
					param, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class create_audio_task_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private AudioTaskCreationParameter param;

			public create_audio_task_call(
					AudioTaskCreationParameter param,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.param = param;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"create_audio_task",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				create_audio_task_args args = new create_audio_task_args();
				args.setParam(param);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public long getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_create_audio_task();
			}
		}

		public void get_task_status(List<Long> task_ids,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			get_task_status_call method_call = new get_task_status_call(
					task_ids, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class get_task_status_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private List<Long> task_ids;

			public get_task_status_call(
					List<Long> task_ids,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.task_ids = task_ids;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"get_task_status",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				get_task_status_args args = new get_task_status_args();
				args.setTask_ids(task_ids);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Map<Long, THermesTaskStatus> getResult()
					throws HermesUserException, HermesSystemException,
					HermesUnknownException, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_get_task_status();
			}
		}

		public void get_user_reply(String phone_number, long timestamp,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			get_user_reply_call method_call = new get_user_reply_call(
					phone_number, timestamp, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class get_user_reply_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String phone_number;
			private long timestamp;

			public get_user_reply_call(
					String phone_number,
					long timestamp,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.phone_number = phone_number;
				this.timestamp = timestamp;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"get_user_reply",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				get_user_reply_args args = new get_user_reply_args();
				args.setPhone_number(phone_number);
				args.setTimestamp(timestamp);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<THermesUserReply> getResult()
					throws HermesUserException, HermesSystemException,
					HermesUnknownException, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_get_user_reply();
			}
		}

		public void verify_code_create(VerifyCodeCreationParameter param,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			verify_code_create_call method_call = new verify_code_create_call(
					param, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class verify_code_create_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private VerifyCodeCreationParameter param;

			public verify_code_create_call(
					VerifyCodeCreationParameter param,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.param = param;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"verify_code_create",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				verify_code_create_args args = new verify_code_create_args();
				args.setParam(param);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public VerifyCodeCreationResult getResult()
					throws HermesUserException, HermesSystemException,
					HermesUnknownException, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_verify_code_create();
			}
		}

		public void verify_code_validate(String hash_value,
				String verify_code_to_validate,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			verify_code_validate_call method_call = new verify_code_validate_call(
					hash_value, verify_code_to_validate, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class verify_code_validate_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String hash_value;
			private String verify_code_to_validate;

			public verify_code_validate_call(
					String hash_value,
					String verify_code_to_validate,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.hash_value = hash_value;
				this.verify_code_to_validate = verify_code_to_validate;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"verify_code_validate",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				verify_code_validate_args args = new verify_code_validate_args();
				args.setHash_value(hash_value);
				args.setVerify_code_to_validate(verify_code_to_validate);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_verify_code_validate();
			}
		}

		public void validate_verify_code_with_hash(String sender_key,
				String hash_value, String verify_code_to_validate,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			validate_verify_code_with_hash_call method_call = new validate_verify_code_with_hash_call(
					sender_key, hash_value, verify_code_to_validate,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class validate_verify_code_with_hash_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String sender_key;
			private String hash_value;
			private String verify_code_to_validate;

			public validate_verify_code_with_hash_call(
					String sender_key,
					String hash_value,
					String verify_code_to_validate,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.sender_key = sender_key;
				this.hash_value = hash_value;
				this.verify_code_to_validate = verify_code_to_validate;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"validate_verify_code_with_hash",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				validate_verify_code_with_hash_args args = new validate_verify_code_with_hash_args();
				args.setSender_key(sender_key);
				args.setHash_value(hash_value);
				args.setVerify_code_to_validate(verify_code_to_validate);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_validate_verify_code_with_hash();
			}
		}

		public void validate_verify_code_with_receiver(String sender_key,
				String receiver, String verify_code_to_validate,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			validate_verify_code_with_receiver_call method_call = new validate_verify_code_with_receiver_call(
					sender_key, receiver, verify_code_to_validate,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class validate_verify_code_with_receiver_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String sender_key;
			private String receiver;
			private String verify_code_to_validate;

			public validate_verify_code_with_receiver_call(
					String sender_key,
					String receiver,
					String verify_code_to_validate,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.sender_key = sender_key;
				this.receiver = receiver;
				this.verify_code_to_validate = verify_code_to_validate;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"validate_verify_code_with_receiver",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				validate_verify_code_with_receiver_args args = new validate_verify_code_with_receiver_args();
				args.setSender_key(sender_key);
				args.setReceiver(receiver);
				args.setVerify_code_to_validate(verify_code_to_validate);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot))
						.recv_validate_verify_code_with_receiver();
			}
		}

		public void validated_within_n_minutes(String sender_key,
				String receiver, long minutes,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			validated_within_n_minutes_call method_call = new validated_within_n_minutes_call(
					sender_key, receiver, minutes, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class validated_within_n_minutes_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String sender_key;
			private String receiver;
			private long minutes;

			public validated_within_n_minutes_call(
					String sender_key,
					String receiver,
					long minutes,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.sender_key = sender_key;
				this.receiver = receiver;
				this.minutes = minutes;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"validated_within_n_minutes",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				validated_within_n_minutes_args args = new validated_within_n_minutes_args();
				args.setSender_key(sender_key);
				args.setReceiver(receiver);
				args.setMinutes(minutes);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_validated_within_n_minutes();
			}
		}

		public void query_sent_verify_code(String receiver, short limit,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			query_sent_verify_code_call method_call = new query_sent_verify_code_call(
					receiver, limit, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class query_sent_verify_code_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String receiver;
			private short limit;

			public query_sent_verify_code_call(
					String receiver,
					short limit,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.receiver = receiver;
				this.limit = limit;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"query_sent_verify_code",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				query_sent_verify_code_args args = new query_sent_verify_code_args();
				args.setReceiver(receiver);
				args.setLimit(limit);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<THermesVerifyCodeQueryResult> getResult()
					throws HermesUserException, HermesSystemException,
					HermesUnknownException, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_query_sent_verify_code();
			}
		}

		public void query_sms_task(String receiver, short limit,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			query_sms_task_call method_call = new query_sms_task_call(receiver,
					limit, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class query_sms_task_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String receiver;
			private short limit;

			public query_sms_task_call(
					String receiver,
					short limit,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.receiver = receiver;
				this.limit = limit;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"query_sms_task",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				query_sms_task_args args = new query_sms_task_args();
				args.setReceiver(receiver);
				args.setLimit(limit);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<THermesSMSTaskQueryResult> getResult()
					throws HermesUserException, HermesSystemException,
					HermesUnknownException, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_query_sms_task();
			}
		}

		public void get_template_id_by_slug(String slug,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			get_template_id_by_slug_call method_call = new get_template_id_by_slug_call(
					slug, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class get_template_id_by_slug_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String slug;

			public get_template_id_by_slug_call(
					String slug,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.slug = slug;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"get_template_id_by_slug",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				get_template_id_by_slug_args args = new get_template_id_by_slug_args();
				args.setSlug(slug);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public long getResult() throws HermesUserException,
					HermesSystemException, HermesUnknownException,
					org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_get_template_id_by_slug();
			}
		}

	}

	public static class Processor<I extends Iface> extends
			org.apache.thrift.TBaseProcessor<I> implements
			org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory
				.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(
				I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("ping", new ping());
			processMap.put("system_check", new system_check());
			processMap.put("create_sender", new create_sender());
			processMap.put("create_sms_template", new create_sms_template());
			processMap.put("get_sms_template_verify_status",
					new get_sms_template_verify_status());
			processMap.put("create_task", new create_task());
			processMap.put("create_template_task", new create_template_task());
			processMap.put("create_audio_task", new create_audio_task());
			processMap.put("get_task_status", new get_task_status());
			processMap.put("get_user_reply", new get_user_reply());
			processMap.put("verify_code_create", new verify_code_create());
			processMap.put("verify_code_validate", new verify_code_validate());
			processMap.put("validate_verify_code_with_hash",
					new validate_verify_code_with_hash());
			processMap.put("validate_verify_code_with_receiver",
					new validate_verify_code_with_receiver());
			processMap.put("validated_within_n_minutes",
					new validated_within_n_minutes());
			processMap.put("query_sent_verify_code",
					new query_sent_verify_code());
			processMap.put("query_sms_task", new query_sms_task());
			processMap.put("get_template_id_by_slug",
					new get_template_id_by_slug());
			return processMap;
		}

		public static class ping<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, ping_args> {
			public ping() {
				super("ping");
			}

			public ping_args getEmptyArgsInstance() {
				return new ping_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public ping_result getResult(I iface, ping_args args)
					throws org.apache.thrift.TException {
				ping_result result = new ping_result();
				try {
					result.success = iface.ping();
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class system_check<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, system_check_args> {
			public system_check() {
				super("system_check");
			}

			public system_check_args getEmptyArgsInstance() {
				return new system_check_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public system_check_result getResult(I iface, system_check_args args)
					throws org.apache.thrift.TException {
				system_check_result result = new system_check_result();
				try {
					result.success = iface.system_check();
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class create_sender<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, create_sender_args> {
			public create_sender() {
				super("create_sender");
			}

			public create_sender_args getEmptyArgsInstance() {
				return new create_sender_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public create_sender_result getResult(I iface,
					create_sender_args args)
					throws org.apache.thrift.TException {
				create_sender_result result = new create_sender_result();
				try {
					result.success = iface.create_sender(args.param);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class create_sms_template<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, create_sms_template_args> {
			public create_sms_template() {
				super("create_sms_template");
			}

			public create_sms_template_args getEmptyArgsInstance() {
				return new create_sms_template_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public create_sms_template_result getResult(I iface,
					create_sms_template_args args)
					throws org.apache.thrift.TException {
				create_sms_template_result result = new create_sms_template_result();
				try {
					result.success = iface.create_sms_template(
							args.template_content, args.template_params,
							args.template_slug);
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class get_sms_template_verify_status<I extends Iface>
				extends
				org.apache.thrift.ProcessFunction<I, get_sms_template_verify_status_args> {
			public get_sms_template_verify_status() {
				super("get_sms_template_verify_status");
			}

			public get_sms_template_verify_status_args getEmptyArgsInstance() {
				return new get_sms_template_verify_status_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public get_sms_template_verify_status_result getResult(I iface,
					get_sms_template_verify_status_args args)
					throws org.apache.thrift.TException {
				get_sms_template_verify_status_result result = new get_sms_template_verify_status_result();
				try {
					result.success = iface
							.get_sms_template_verify_status(args.template_slug);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class create_task<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, create_task_args> {
			public create_task() {
				super("create_task");
			}

			public create_task_args getEmptyArgsInstance() {
				return new create_task_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public create_task_result getResult(I iface, create_task_args args)
					throws org.apache.thrift.TException {
				create_task_result result = new create_task_result();
				try {
					result.success = iface.create_task(args.param);
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class create_template_task<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, create_template_task_args> {
			public create_template_task() {
				super("create_template_task");
			}

			public create_template_task_args getEmptyArgsInstance() {
				return new create_template_task_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public create_template_task_result getResult(I iface,
					create_template_task_args args)
					throws org.apache.thrift.TException {
				create_template_task_result result = new create_template_task_result();
				try {
					result.success = iface.create_template_task(args.param);
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class create_audio_task<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, create_audio_task_args> {
			public create_audio_task() {
				super("create_audio_task");
			}

			public create_audio_task_args getEmptyArgsInstance() {
				return new create_audio_task_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public create_audio_task_result getResult(I iface,
					create_audio_task_args args)
					throws org.apache.thrift.TException {
				create_audio_task_result result = new create_audio_task_result();
				try {
					result.success = iface.create_audio_task(args.param);
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class get_task_status<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, get_task_status_args> {
			public get_task_status() {
				super("get_task_status");
			}

			public get_task_status_args getEmptyArgsInstance() {
				return new get_task_status_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public get_task_status_result getResult(I iface,
					get_task_status_args args)
					throws org.apache.thrift.TException {
				get_task_status_result result = new get_task_status_result();
				try {
					result.success = iface.get_task_status(args.task_ids);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class get_user_reply<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, get_user_reply_args> {
			public get_user_reply() {
				super("get_user_reply");
			}

			public get_user_reply_args getEmptyArgsInstance() {
				return new get_user_reply_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public get_user_reply_result getResult(I iface,
					get_user_reply_args args)
					throws org.apache.thrift.TException {
				get_user_reply_result result = new get_user_reply_result();
				try {
					result.success = iface.get_user_reply(args.phone_number,
							args.timestamp);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class verify_code_create<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, verify_code_create_args> {
			public verify_code_create() {
				super("verify_code_create");
			}

			public verify_code_create_args getEmptyArgsInstance() {
				return new verify_code_create_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public verify_code_create_result getResult(I iface,
					verify_code_create_args args)
					throws org.apache.thrift.TException {
				verify_code_create_result result = new verify_code_create_result();
				try {
					result.success = iface.verify_code_create(args.param);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class verify_code_validate<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, verify_code_validate_args> {
			public verify_code_validate() {
				super("verify_code_validate");
			}

			public verify_code_validate_args getEmptyArgsInstance() {
				return new verify_code_validate_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public verify_code_validate_result getResult(I iface,
					verify_code_validate_args args)
					throws org.apache.thrift.TException {
				verify_code_validate_result result = new verify_code_validate_result();
				try {
					result.success = iface.verify_code_validate(
							args.hash_value, args.verify_code_to_validate);
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class validate_verify_code_with_hash<I extends Iface>
				extends
				org.apache.thrift.ProcessFunction<I, validate_verify_code_with_hash_args> {
			public validate_verify_code_with_hash() {
				super("validate_verify_code_with_hash");
			}

			public validate_verify_code_with_hash_args getEmptyArgsInstance() {
				return new validate_verify_code_with_hash_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public validate_verify_code_with_hash_result getResult(I iface,
					validate_verify_code_with_hash_args args)
					throws org.apache.thrift.TException {
				validate_verify_code_with_hash_result result = new validate_verify_code_with_hash_result();
				try {
					result.success = iface.validate_verify_code_with_hash(
							args.sender_key, args.hash_value,
							args.verify_code_to_validate);
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class validate_verify_code_with_receiver<I extends Iface>
				extends
				org.apache.thrift.ProcessFunction<I, validate_verify_code_with_receiver_args> {
			public validate_verify_code_with_receiver() {
				super("validate_verify_code_with_receiver");
			}

			public validate_verify_code_with_receiver_args getEmptyArgsInstance() {
				return new validate_verify_code_with_receiver_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public validate_verify_code_with_receiver_result getResult(I iface,
					validate_verify_code_with_receiver_args args)
					throws org.apache.thrift.TException {
				validate_verify_code_with_receiver_result result = new validate_verify_code_with_receiver_result();
				try {
					result.success = iface.validate_verify_code_with_receiver(
							args.sender_key, args.receiver,
							args.verify_code_to_validate);
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class validated_within_n_minutes<I extends Iface>
				extends
				org.apache.thrift.ProcessFunction<I, validated_within_n_minutes_args> {
			public validated_within_n_minutes() {
				super("validated_within_n_minutes");
			}

			public validated_within_n_minutes_args getEmptyArgsInstance() {
				return new validated_within_n_minutes_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public validated_within_n_minutes_result getResult(I iface,
					validated_within_n_minutes_args args)
					throws org.apache.thrift.TException {
				validated_within_n_minutes_result result = new validated_within_n_minutes_result();
				try {
					result.success = iface.validated_within_n_minutes(
							args.sender_key, args.receiver, args.minutes);
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class query_sent_verify_code<I extends Iface>
				extends
				org.apache.thrift.ProcessFunction<I, query_sent_verify_code_args> {
			public query_sent_verify_code() {
				super("query_sent_verify_code");
			}

			public query_sent_verify_code_args getEmptyArgsInstance() {
				return new query_sent_verify_code_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public query_sent_verify_code_result getResult(I iface,
					query_sent_verify_code_args args)
					throws org.apache.thrift.TException {
				query_sent_verify_code_result result = new query_sent_verify_code_result();
				try {
					result.success = iface.query_sent_verify_code(
							args.receiver, args.limit);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class query_sms_task<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, query_sms_task_args> {
			public query_sms_task() {
				super("query_sms_task");
			}

			public query_sms_task_args getEmptyArgsInstance() {
				return new query_sms_task_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public query_sms_task_result getResult(I iface,
					query_sms_task_args args)
					throws org.apache.thrift.TException {
				query_sms_task_result result = new query_sms_task_result();
				try {
					result.success = iface.query_sms_task(args.receiver,
							args.limit);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

		public static class get_template_id_by_slug<I extends Iface>
				extends
				org.apache.thrift.ProcessFunction<I, get_template_id_by_slug_args> {
			public get_template_id_by_slug() {
				super("get_template_id_by_slug");
			}

			public get_template_id_by_slug_args getEmptyArgsInstance() {
				return new get_template_id_by_slug_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public get_template_id_by_slug_result getResult(I iface,
					get_template_id_by_slug_args args)
					throws org.apache.thrift.TException {
				get_template_id_by_slug_result result = new get_template_id_by_slug_result();
				try {
					result.success = iface.get_template_id_by_slug(args.slug);
					result.setSuccessIsSet(true);
				} catch (HermesUserException user_exception) {
					result.user_exception = user_exception;
				} catch (HermesSystemException system_exception) {
					result.system_exception = system_exception;
				} catch (HermesUnknownException unknown_exception) {
					result.unknown_exception = unknown_exception;
				}
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends
			org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(
				I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("ping", new ping());
			processMap.put("system_check", new system_check());
			processMap.put("create_sender", new create_sender());
			processMap.put("create_sms_template", new create_sms_template());
			processMap.put("get_sms_template_verify_status",
					new get_sms_template_verify_status());
			processMap.put("create_task", new create_task());
			processMap.put("create_template_task", new create_template_task());
			processMap.put("create_audio_task", new create_audio_task());
			processMap.put("get_task_status", new get_task_status());
			processMap.put("get_user_reply", new get_user_reply());
			processMap.put("verify_code_create", new verify_code_create());
			processMap.put("verify_code_validate", new verify_code_validate());
			processMap.put("validate_verify_code_with_hash",
					new validate_verify_code_with_hash());
			processMap.put("validate_verify_code_with_receiver",
					new validate_verify_code_with_receiver());
			processMap.put("validated_within_n_minutes",
					new validated_within_n_minutes());
			processMap.put("query_sent_verify_code",
					new query_sent_verify_code());
			processMap.put("query_sms_task", new query_sms_task());
			processMap.put("get_template_id_by_slug",
					new get_template_id_by_slug());
			return processMap;
		}

		public static class ping<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, ping_args, Boolean> {
			public ping() {
				super("ping");
			}

			public ping_args getEmptyArgsInstance() {
				return new ping_args();
			}

			public AsyncMethodCallback<Boolean> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Boolean>() {
					public void onComplete(Boolean o) {
						ping_result result = new ping_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						ping_result result = new ping_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					ping_args args,
					org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler)
					throws TException {
				iface.ping(resultHandler);
			}
		}

		public static class system_check<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, system_check_args, Boolean> {
			public system_check() {
				super("system_check");
			}

			public system_check_args getEmptyArgsInstance() {
				return new system_check_args();
			}

			public AsyncMethodCallback<Boolean> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Boolean>() {
					public void onComplete(Boolean o) {
						system_check_result result = new system_check_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						system_check_result result = new system_check_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					system_check_args args,
					org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler)
					throws TException {
				iface.system_check(resultHandler);
			}
		}

		public static class create_sender<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, create_sender_args, String> {
			public create_sender() {
				super("create_sender");
			}

			public create_sender_args getEmptyArgsInstance() {
				return new create_sender_args();
			}

			public AsyncMethodCallback<String> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						create_sender_result result = new create_sender_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						create_sender_result result = new create_sender_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					create_sender_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler)
					throws TException {
				iface.create_sender(args.param, resultHandler);
			}
		}

		public static class create_sms_template<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, create_sms_template_args, Long> {
			public create_sms_template() {
				super("create_sms_template");
			}

			public create_sms_template_args getEmptyArgsInstance() {
				return new create_sms_template_args();
			}

			public AsyncMethodCallback<Long> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Long>() {
					public void onComplete(Long o) {
						create_sms_template_result result = new create_sms_template_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						create_sms_template_result result = new create_sms_template_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					create_sms_template_args args,
					org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler)
					throws TException {
				iface.create_sms_template(args.template_content,
						args.template_params, args.template_slug, resultHandler);
			}
		}

		public static class get_sms_template_verify_status<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, get_sms_template_verify_status_args, THermesTemplateVerifyStatus> {
			public get_sms_template_verify_status() {
				super("get_sms_template_verify_status");
			}

			public get_sms_template_verify_status_args getEmptyArgsInstance() {
				return new get_sms_template_verify_status_args();
			}

			public AsyncMethodCallback<THermesTemplateVerifyStatus> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<THermesTemplateVerifyStatus>() {
					public void onComplete(THermesTemplateVerifyStatus o) {
						get_sms_template_verify_status_result result = new get_sms_template_verify_status_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						get_sms_template_verify_status_result result = new get_sms_template_verify_status_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					get_sms_template_verify_status_args args,
					org.apache.thrift.async.AsyncMethodCallback<THermesTemplateVerifyStatus> resultHandler)
					throws TException {
				iface.get_sms_template_verify_status(args.template_slug,
						resultHandler);
			}
		}

		public static class create_task<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, create_task_args, Long> {
			public create_task() {
				super("create_task");
			}

			public create_task_args getEmptyArgsInstance() {
				return new create_task_args();
			}

			public AsyncMethodCallback<Long> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Long>() {
					public void onComplete(Long o) {
						create_task_result result = new create_task_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						create_task_result result = new create_task_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					create_task_args args,
					org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler)
					throws TException {
				iface.create_task(args.param, resultHandler);
			}
		}

		public static class create_template_task<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, create_template_task_args, Long> {
			public create_template_task() {
				super("create_template_task");
			}

			public create_template_task_args getEmptyArgsInstance() {
				return new create_template_task_args();
			}

			public AsyncMethodCallback<Long> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Long>() {
					public void onComplete(Long o) {
						create_template_task_result result = new create_template_task_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						create_template_task_result result = new create_template_task_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					create_template_task_args args,
					org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler)
					throws TException {
				iface.create_template_task(args.param, resultHandler);
			}
		}

		public static class create_audio_task<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, create_audio_task_args, Long> {
			public create_audio_task() {
				super("create_audio_task");
			}

			public create_audio_task_args getEmptyArgsInstance() {
				return new create_audio_task_args();
			}

			public AsyncMethodCallback<Long> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Long>() {
					public void onComplete(Long o) {
						create_audio_task_result result = new create_audio_task_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						create_audio_task_result result = new create_audio_task_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					create_audio_task_args args,
					org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler)
					throws TException {
				iface.create_audio_task(args.param, resultHandler);
			}
		}

		public static class get_task_status<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, get_task_status_args, Map<Long, THermesTaskStatus>> {
			public get_task_status() {
				super("get_task_status");
			}

			public get_task_status_args getEmptyArgsInstance() {
				return new get_task_status_args();
			}

			public AsyncMethodCallback<Map<Long, THermesTaskStatus>> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Map<Long, THermesTaskStatus>>() {
					public void onComplete(Map<Long, THermesTaskStatus> o) {
						get_task_status_result result = new get_task_status_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						get_task_status_result result = new get_task_status_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					get_task_status_args args,
					org.apache.thrift.async.AsyncMethodCallback<Map<Long, THermesTaskStatus>> resultHandler)
					throws TException {
				iface.get_task_status(args.task_ids, resultHandler);
			}
		}

		public static class get_user_reply<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, get_user_reply_args, List<THermesUserReply>> {
			public get_user_reply() {
				super("get_user_reply");
			}

			public get_user_reply_args getEmptyArgsInstance() {
				return new get_user_reply_args();
			}

			public AsyncMethodCallback<List<THermesUserReply>> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<List<THermesUserReply>>() {
					public void onComplete(List<THermesUserReply> o) {
						get_user_reply_result result = new get_user_reply_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						get_user_reply_result result = new get_user_reply_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					get_user_reply_args args,
					org.apache.thrift.async.AsyncMethodCallback<List<THermesUserReply>> resultHandler)
					throws TException {
				iface.get_user_reply(args.phone_number, args.timestamp,
						resultHandler);
			}
		}

		public static class verify_code_create<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, verify_code_create_args, VerifyCodeCreationResult> {
			public verify_code_create() {
				super("verify_code_create");
			}

			public verify_code_create_args getEmptyArgsInstance() {
				return new verify_code_create_args();
			}

			public AsyncMethodCallback<VerifyCodeCreationResult> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<VerifyCodeCreationResult>() {
					public void onComplete(VerifyCodeCreationResult o) {
						verify_code_create_result result = new verify_code_create_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						verify_code_create_result result = new verify_code_create_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					verify_code_create_args args,
					org.apache.thrift.async.AsyncMethodCallback<VerifyCodeCreationResult> resultHandler)
					throws TException {
				iface.verify_code_create(args.param, resultHandler);
			}
		}

		public static class verify_code_validate<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, verify_code_validate_args, Boolean> {
			public verify_code_validate() {
				super("verify_code_validate");
			}

			public verify_code_validate_args getEmptyArgsInstance() {
				return new verify_code_validate_args();
			}

			public AsyncMethodCallback<Boolean> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Boolean>() {
					public void onComplete(Boolean o) {
						verify_code_validate_result result = new verify_code_validate_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						verify_code_validate_result result = new verify_code_validate_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					verify_code_validate_args args,
					org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler)
					throws TException {
				iface.verify_code_validate(args.hash_value,
						args.verify_code_to_validate, resultHandler);
			}
		}

		public static class validate_verify_code_with_hash<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, validate_verify_code_with_hash_args, Boolean> {
			public validate_verify_code_with_hash() {
				super("validate_verify_code_with_hash");
			}

			public validate_verify_code_with_hash_args getEmptyArgsInstance() {
				return new validate_verify_code_with_hash_args();
			}

			public AsyncMethodCallback<Boolean> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Boolean>() {
					public void onComplete(Boolean o) {
						validate_verify_code_with_hash_result result = new validate_verify_code_with_hash_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						validate_verify_code_with_hash_result result = new validate_verify_code_with_hash_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					validate_verify_code_with_hash_args args,
					org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler)
					throws TException {
				iface.validate_verify_code_with_hash(args.sender_key,
						args.hash_value, args.verify_code_to_validate,
						resultHandler);
			}
		}

		public static class validate_verify_code_with_receiver<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, validate_verify_code_with_receiver_args, Boolean> {
			public validate_verify_code_with_receiver() {
				super("validate_verify_code_with_receiver");
			}

			public validate_verify_code_with_receiver_args getEmptyArgsInstance() {
				return new validate_verify_code_with_receiver_args();
			}

			public AsyncMethodCallback<Boolean> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Boolean>() {
					public void onComplete(Boolean o) {
						validate_verify_code_with_receiver_result result = new validate_verify_code_with_receiver_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						validate_verify_code_with_receiver_result result = new validate_verify_code_with_receiver_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					validate_verify_code_with_receiver_args args,
					org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler)
					throws TException {
				iface.validate_verify_code_with_receiver(args.sender_key,
						args.receiver, args.verify_code_to_validate,
						resultHandler);
			}
		}

		public static class validated_within_n_minutes<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, validated_within_n_minutes_args, Boolean> {
			public validated_within_n_minutes() {
				super("validated_within_n_minutes");
			}

			public validated_within_n_minutes_args getEmptyArgsInstance() {
				return new validated_within_n_minutes_args();
			}

			public AsyncMethodCallback<Boolean> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Boolean>() {
					public void onComplete(Boolean o) {
						validated_within_n_minutes_result result = new validated_within_n_minutes_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						validated_within_n_minutes_result result = new validated_within_n_minutes_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					validated_within_n_minutes_args args,
					org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler)
					throws TException {
				iface.validated_within_n_minutes(args.sender_key,
						args.receiver, args.minutes, resultHandler);
			}
		}

		public static class query_sent_verify_code<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, query_sent_verify_code_args, List<THermesVerifyCodeQueryResult>> {
			public query_sent_verify_code() {
				super("query_sent_verify_code");
			}

			public query_sent_verify_code_args getEmptyArgsInstance() {
				return new query_sent_verify_code_args();
			}

			public AsyncMethodCallback<List<THermesVerifyCodeQueryResult>> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<List<THermesVerifyCodeQueryResult>>() {
					public void onComplete(List<THermesVerifyCodeQueryResult> o) {
						query_sent_verify_code_result result = new query_sent_verify_code_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						query_sent_verify_code_result result = new query_sent_verify_code_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					query_sent_verify_code_args args,
					org.apache.thrift.async.AsyncMethodCallback<List<THermesVerifyCodeQueryResult>> resultHandler)
					throws TException {
				iface.query_sent_verify_code(args.receiver, args.limit,
						resultHandler);
			}
		}

		public static class query_sms_task<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, query_sms_task_args, List<THermesSMSTaskQueryResult>> {
			public query_sms_task() {
				super("query_sms_task");
			}

			public query_sms_task_args getEmptyArgsInstance() {
				return new query_sms_task_args();
			}

			public AsyncMethodCallback<List<THermesSMSTaskQueryResult>> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<List<THermesSMSTaskQueryResult>>() {
					public void onComplete(List<THermesSMSTaskQueryResult> o) {
						query_sms_task_result result = new query_sms_task_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						query_sms_task_result result = new query_sms_task_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					query_sms_task_args args,
					org.apache.thrift.async.AsyncMethodCallback<List<THermesSMSTaskQueryResult>> resultHandler)
					throws TException {
				iface.query_sms_task(args.receiver, args.limit, resultHandler);
			}
		}

		public static class get_template_id_by_slug<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, get_template_id_by_slug_args, Long> {
			public get_template_id_by_slug() {
				super("get_template_id_by_slug");
			}

			public get_template_id_by_slug_args getEmptyArgsInstance() {
				return new get_template_id_by_slug_args();
			}

			public AsyncMethodCallback<Long> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Long>() {
					public void onComplete(Long o) {
						get_template_id_by_slug_result result = new get_template_id_by_slug_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						get_template_id_by_slug_result result = new get_template_id_by_slug_result();
						if (e instanceof HermesUserException) {
							result.user_exception = (HermesUserException) e;
							result.setUser_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesSystemException) {
							result.system_exception = (HermesSystemException) e;
							result.setSystem_exceptionIsSet(true);
							msg = result;
						} else if (e instanceof HermesUnknownException) {
							result.unknown_exception = (HermesUnknownException) e;
							result.setUnknown_exceptionIsSet(true);
							msg = result;
						} else {
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					get_template_id_by_slug_args args,
					org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler)
					throws TException {
				iface.get_template_id_by_slug(args.slug, resultHandler);
			}
		}

	}

	public static class ping_args implements
			org.apache.thrift.TBase<ping_args, ping_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<ping_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ping_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new ping_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					ping_args.class, metaDataMap);
		}

		public ping_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ping_args(ping_args other) {
		}

		public ping_args deepCopy() {
			return new ping_args(this);
		}

		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ping_args)
				return this.equals((ping_args) that);
			return false;
		}

		public boolean equals(ping_args that) {
			if (that == null)
				return false;

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		public int compareTo(ping_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("ping_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ping_argsStandardSchemeFactory implements
				SchemeFactory {
			public ping_argsStandardScheme getScheme() {
				return new ping_argsStandardScheme();
			}
		}

		private static class ping_argsStandardScheme extends
				StandardScheme<ping_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					ping_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					ping_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ping_argsTupleSchemeFactory implements
				SchemeFactory {
			public ping_argsTupleScheme getScheme() {
				return new ping_argsTupleScheme();
			}
		}

		private static class ping_argsTupleScheme extends
				TupleScheme<ping_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					ping_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					ping_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class ping_result implements
			org.apache.thrift.TBase<ping_result, ping_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<ping_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ping_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new ping_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
		}

		public boolean success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					ping_result.class, metaDataMap);
		}

		public ping_result() {
		}

		public ping_result(boolean success, HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ping_result(ping_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public ping_result deepCopy() {
			return new ping_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public ping_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public ping_result setUser_exception(HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public ping_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public ping_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof ping_result)
				return this.equals((ping_result) that);
			return false;
		}

		public boolean equals(ping_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(ping_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("ping_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ping_resultStandardSchemeFactory implements
				SchemeFactory {
			public ping_resultStandardScheme getScheme() {
				return new ping_resultStandardScheme();
			}
		}

		private static class ping_resultStandardScheme extends
				StandardScheme<ping_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					ping_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					ping_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ping_resultTupleSchemeFactory implements
				SchemeFactory {
			public ping_resultTupleScheme getScheme() {
				return new ping_resultTupleScheme();
			}
		}

		private static class ping_resultTupleScheme extends
				TupleScheme<ping_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					ping_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					ping_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class system_check_args
			implements
			org.apache.thrift.TBase<system_check_args, system_check_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<system_check_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"system_check_args");

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new system_check_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new system_check_argsTupleSchemeFactory());
		}

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					system_check_args.class, metaDataMap);
		}

		public system_check_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public system_check_args(system_check_args other) {
		}

		public system_check_args deepCopy() {
			return new system_check_args(this);
		}

		public void clear() {
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof system_check_args)
				return this.equals((system_check_args) that);
			return false;
		}

		public boolean equals(system_check_args that) {
			if (that == null)
				return false;

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			return list.hashCode();
		}

		public int compareTo(system_check_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("system_check_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class system_check_argsStandardSchemeFactory implements
				SchemeFactory {
			public system_check_argsStandardScheme getScheme() {
				return new system_check_argsStandardScheme();
			}
		}

		private static class system_check_argsStandardScheme extends
				StandardScheme<system_check_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					system_check_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					system_check_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class system_check_argsTupleSchemeFactory implements
				SchemeFactory {
			public system_check_argsTupleScheme getScheme() {
				return new system_check_argsTupleScheme();
			}
		}

		private static class system_check_argsTupleScheme extends
				TupleScheme<system_check_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					system_check_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					system_check_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
			}
		}

	}

	public static class system_check_result
			implements
			org.apache.thrift.TBase<system_check_result, system_check_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<system_check_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"system_check_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new system_check_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new system_check_resultTupleSchemeFactory());
		}

		public boolean success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					system_check_result.class, metaDataMap);
		}

		public system_check_result() {
		}

		public system_check_result(boolean success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public system_check_result(system_check_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public system_check_result deepCopy() {
			return new system_check_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public system_check_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public system_check_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public system_check_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public system_check_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof system_check_result)
				return this.equals((system_check_result) that);
			return false;
		}

		public boolean equals(system_check_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(system_check_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("system_check_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class system_check_resultStandardSchemeFactory implements
				SchemeFactory {
			public system_check_resultStandardScheme getScheme() {
				return new system_check_resultStandardScheme();
			}
		}

		private static class system_check_resultStandardScheme extends
				StandardScheme<system_check_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					system_check_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					system_check_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class system_check_resultTupleSchemeFactory implements
				SchemeFactory {
			public system_check_resultTupleScheme getScheme() {
				return new system_check_resultTupleScheme();
			}
		}

		private static class system_check_resultTupleScheme extends
				TupleScheme<system_check_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					system_check_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					system_check_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class create_sender_args
			implements
			org.apache.thrift.TBase<create_sender_args, create_sender_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<create_sender_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_sender_args");

		private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"param", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_sender_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_sender_argsTupleSchemeFactory());
		}

		public SenderCreationParameter param; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAM((short) 1, "param");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAM
					return PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("param",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									SenderCreationParameter.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_sender_args.class, metaDataMap);
		}

		public create_sender_args() {
		}

		public create_sender_args(SenderCreationParameter param) {
			this();
			this.param = param;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_sender_args(create_sender_args other) {
			if (other.isSetParam()) {
				this.param = new SenderCreationParameter(other.param);
			}
		}

		public create_sender_args deepCopy() {
			return new create_sender_args(this);
		}

		public void clear() {
			this.param = null;
		}

		public SenderCreationParameter getParam() {
			return this.param;
		}

		public create_sender_args setParam(SenderCreationParameter param) {
			this.param = param;
			return this;
		}

		public void unsetParam() {
			this.param = null;
		}

		/**
		 * Returns true if field param is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParam() {
			return this.param != null;
		}

		public void setParamIsSet(boolean value) {
			if (!value) {
				this.param = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAM:
				if (value == null) {
					unsetParam();
				} else {
					setParam((SenderCreationParameter) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAM:
				return getParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAM:
				return isSetParam();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_sender_args)
				return this.equals((create_sender_args) that);
			return false;
		}

		public boolean equals(create_sender_args that) {
			if (that == null)
				return false;

			boolean this_present_param = true && this.isSetParam();
			boolean that_present_param = true && that.isSetParam();
			if (this_present_param || that_present_param) {
				if (!(this_present_param && that_present_param))
					return false;
				if (!this.param.equals(that.param))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_param = true && (isSetParam());
			list.add(present_param);
			if (present_param)
				list.add(param);

			return list.hashCode();
		}

		public int compareTo(create_sender_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParam()).compareTo(
					other.isSetParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.param, other.param);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_sender_args(");
			boolean first = true;

			sb.append("param:");
			if (this.param == null) {
				sb.append("null");
			} else {
				sb.append(this.param);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (param != null) {
				param.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_sender_argsStandardSchemeFactory implements
				SchemeFactory {
			public create_sender_argsStandardScheme getScheme() {
				return new create_sender_argsStandardScheme();
			}
		}

		private static class create_sender_argsStandardScheme extends
				StandardScheme<create_sender_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_sender_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.param = new SenderCreationParameter();
							struct.param.read(iprot);
							struct.setParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_sender_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.param != null) {
					oprot.writeFieldBegin(PARAM_FIELD_DESC);
					struct.param.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_sender_argsTupleSchemeFactory implements
				SchemeFactory {
			public create_sender_argsTupleScheme getScheme() {
				return new create_sender_argsTupleScheme();
			}
		}

		private static class create_sender_argsTupleScheme extends
				TupleScheme<create_sender_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_sender_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParam()) {
					struct.param.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_sender_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.param = new SenderCreationParameter();
					struct.param.read(iprot);
					struct.setParamIsSet(true);
				}
			}
		}

	}

	public static class create_sender_result
			implements
			org.apache.thrift.TBase<create_sender_result, create_sender_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<create_sender_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_sender_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_sender_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_sender_resultTupleSchemeFactory());
		}

		public String success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_sender_result.class, metaDataMap);
		}

		public create_sender_result() {
		}

		public create_sender_result(String success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_sender_result(create_sender_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public create_sender_result deepCopy() {
			return new create_sender_result(this);
		}

		public void clear() {
			this.success = null;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public create_sender_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public create_sender_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public create_sender_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public create_sender_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_sender_result)
				return this.equals((create_sender_result) that);
			return false;
		}

		public boolean equals(create_sender_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(create_sender_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_sender_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_sender_resultStandardSchemeFactory
				implements SchemeFactory {
			public create_sender_resultStandardScheme getScheme() {
				return new create_sender_resultStandardScheme();
			}
		}

		private static class create_sender_resultStandardScheme extends
				StandardScheme<create_sender_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_sender_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_sender_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_sender_resultTupleSchemeFactory implements
				SchemeFactory {
			public create_sender_resultTupleScheme getScheme() {
				return new create_sender_resultTupleScheme();
			}
		}

		private static class create_sender_resultTupleScheme extends
				TupleScheme<create_sender_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_sender_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_sender_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class create_sms_template_args
			implements
			org.apache.thrift.TBase<create_sms_template_args, create_sms_template_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<create_sms_template_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_sms_template_args");

		private static final org.apache.thrift.protocol.TField TEMPLATE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"template_content", org.apache.thrift.protocol.TType.STRING,
				(short) 1);
		private static final org.apache.thrift.protocol.TField TEMPLATE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"template_params", org.apache.thrift.protocol.TType.STRING,
				(short) 2);
		private static final org.apache.thrift.protocol.TField TEMPLATE_SLUG_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"template_slug", org.apache.thrift.protocol.TType.STRING,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_sms_template_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_sms_template_argsTupleSchemeFactory());
		}

		public String template_content; // required
		public String template_params; // required
		public String template_slug; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TEMPLATE_CONTENT((short) 1, "template_content"), TEMPLATE_PARAMS(
					(short) 2, "template_params"), TEMPLATE_SLUG((short) 3,
					"template_slug");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TEMPLATE_CONTENT
					return TEMPLATE_CONTENT;
				case 2: // TEMPLATE_PARAMS
					return TEMPLATE_PARAMS;
				case 3: // TEMPLATE_SLUG
					return TEMPLATE_SLUG;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.TEMPLATE_CONTENT,
					new org.apache.thrift.meta_data.FieldMetaData(
							"template_content",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TEMPLATE_PARAMS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"template_params",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TEMPLATE_SLUG,
					new org.apache.thrift.meta_data.FieldMetaData(
							"template_slug",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_sms_template_args.class, metaDataMap);
		}

		public create_sms_template_args() {
		}

		public create_sms_template_args(String template_content,
				String template_params, String template_slug) {
			this();
			this.template_content = template_content;
			this.template_params = template_params;
			this.template_slug = template_slug;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_sms_template_args(create_sms_template_args other) {
			if (other.isSetTemplate_content()) {
				this.template_content = other.template_content;
			}
			if (other.isSetTemplate_params()) {
				this.template_params = other.template_params;
			}
			if (other.isSetTemplate_slug()) {
				this.template_slug = other.template_slug;
			}
		}

		public create_sms_template_args deepCopy() {
			return new create_sms_template_args(this);
		}

		public void clear() {
			this.template_content = null;
			this.template_params = null;
			this.template_slug = null;
		}

		public String getTemplate_content() {
			return this.template_content;
		}

		public create_sms_template_args setTemplate_content(
				String template_content) {
			this.template_content = template_content;
			return this;
		}

		public void unsetTemplate_content() {
			this.template_content = null;
		}

		/**
		 * Returns true if field template_content is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetTemplate_content() {
			return this.template_content != null;
		}

		public void setTemplate_contentIsSet(boolean value) {
			if (!value) {
				this.template_content = null;
			}
		}

		public String getTemplate_params() {
			return this.template_params;
		}

		public create_sms_template_args setTemplate_params(
				String template_params) {
			this.template_params = template_params;
			return this;
		}

		public void unsetTemplate_params() {
			this.template_params = null;
		}

		/**
		 * Returns true if field template_params is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetTemplate_params() {
			return this.template_params != null;
		}

		public void setTemplate_paramsIsSet(boolean value) {
			if (!value) {
				this.template_params = null;
			}
		}

		public String getTemplate_slug() {
			return this.template_slug;
		}

		public create_sms_template_args setTemplate_slug(String template_slug) {
			this.template_slug = template_slug;
			return this;
		}

		public void unsetTemplate_slug() {
			this.template_slug = null;
		}

		/**
		 * Returns true if field template_slug is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetTemplate_slug() {
			return this.template_slug != null;
		}

		public void setTemplate_slugIsSet(boolean value) {
			if (!value) {
				this.template_slug = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TEMPLATE_CONTENT:
				if (value == null) {
					unsetTemplate_content();
				} else {
					setTemplate_content((String) value);
				}
				break;

			case TEMPLATE_PARAMS:
				if (value == null) {
					unsetTemplate_params();
				} else {
					setTemplate_params((String) value);
				}
				break;

			case TEMPLATE_SLUG:
				if (value == null) {
					unsetTemplate_slug();
				} else {
					setTemplate_slug((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TEMPLATE_CONTENT:
				return getTemplate_content();

			case TEMPLATE_PARAMS:
				return getTemplate_params();

			case TEMPLATE_SLUG:
				return getTemplate_slug();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TEMPLATE_CONTENT:
				return isSetTemplate_content();
			case TEMPLATE_PARAMS:
				return isSetTemplate_params();
			case TEMPLATE_SLUG:
				return isSetTemplate_slug();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_sms_template_args)
				return this.equals((create_sms_template_args) that);
			return false;
		}

		public boolean equals(create_sms_template_args that) {
			if (that == null)
				return false;

			boolean this_present_template_content = true && this
					.isSetTemplate_content();
			boolean that_present_template_content = true && that
					.isSetTemplate_content();
			if (this_present_template_content || that_present_template_content) {
				if (!(this_present_template_content && that_present_template_content))
					return false;
				if (!this.template_content.equals(that.template_content))
					return false;
			}

			boolean this_present_template_params = true && this
					.isSetTemplate_params();
			boolean that_present_template_params = true && that
					.isSetTemplate_params();
			if (this_present_template_params || that_present_template_params) {
				if (!(this_present_template_params && that_present_template_params))
					return false;
				if (!this.template_params.equals(that.template_params))
					return false;
			}

			boolean this_present_template_slug = true && this
					.isSetTemplate_slug();
			boolean that_present_template_slug = true && that
					.isSetTemplate_slug();
			if (this_present_template_slug || that_present_template_slug) {
				if (!(this_present_template_slug && that_present_template_slug))
					return false;
				if (!this.template_slug.equals(that.template_slug))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_template_content = true && (isSetTemplate_content());
			list.add(present_template_content);
			if (present_template_content)
				list.add(template_content);

			boolean present_template_params = true && (isSetTemplate_params());
			list.add(present_template_params);
			if (present_template_params)
				list.add(template_params);

			boolean present_template_slug = true && (isSetTemplate_slug());
			list.add(present_template_slug);
			if (present_template_slug)
				list.add(template_slug);

			return list.hashCode();
		}

		public int compareTo(create_sms_template_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetTemplate_content())
					.compareTo(other.isSetTemplate_content());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTemplate_content()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.template_content, other.template_content);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetTemplate_params()).compareTo(
					other.isSetTemplate_params());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTemplate_params()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.template_params, other.template_params);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetTemplate_slug()).compareTo(
					other.isSetTemplate_slug());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTemplate_slug()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.template_slug, other.template_slug);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_sms_template_args(");
			boolean first = true;

			sb.append("template_content:");
			if (this.template_content == null) {
				sb.append("null");
			} else {
				sb.append(this.template_content);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("template_params:");
			if (this.template_params == null) {
				sb.append("null");
			} else {
				sb.append(this.template_params);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("template_slug:");
			if (this.template_slug == null) {
				sb.append("null");
			} else {
				sb.append(this.template_slug);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_sms_template_argsStandardSchemeFactory
				implements SchemeFactory {
			public create_sms_template_argsStandardScheme getScheme() {
				return new create_sms_template_argsStandardScheme();
			}
		}

		private static class create_sms_template_argsStandardScheme extends
				StandardScheme<create_sms_template_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_sms_template_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TEMPLATE_CONTENT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.template_content = iprot.readString();
							struct.setTemplate_contentIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // TEMPLATE_PARAMS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.template_params = iprot.readString();
							struct.setTemplate_paramsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // TEMPLATE_SLUG
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.template_slug = iprot.readString();
							struct.setTemplate_slugIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_sms_template_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.template_content != null) {
					oprot.writeFieldBegin(TEMPLATE_CONTENT_FIELD_DESC);
					oprot.writeString(struct.template_content);
					oprot.writeFieldEnd();
				}
				if (struct.template_params != null) {
					oprot.writeFieldBegin(TEMPLATE_PARAMS_FIELD_DESC);
					oprot.writeString(struct.template_params);
					oprot.writeFieldEnd();
				}
				if (struct.template_slug != null) {
					oprot.writeFieldBegin(TEMPLATE_SLUG_FIELD_DESC);
					oprot.writeString(struct.template_slug);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_sms_template_argsTupleSchemeFactory
				implements SchemeFactory {
			public create_sms_template_argsTupleScheme getScheme() {
				return new create_sms_template_argsTupleScheme();
			}
		}

		private static class create_sms_template_argsTupleScheme extends
				TupleScheme<create_sms_template_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_sms_template_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetTemplate_content()) {
					optionals.set(0);
				}
				if (struct.isSetTemplate_params()) {
					optionals.set(1);
				}
				if (struct.isSetTemplate_slug()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetTemplate_content()) {
					oprot.writeString(struct.template_content);
				}
				if (struct.isSetTemplate_params()) {
					oprot.writeString(struct.template_params);
				}
				if (struct.isSetTemplate_slug()) {
					oprot.writeString(struct.template_slug);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_sms_template_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.template_content = iprot.readString();
					struct.setTemplate_contentIsSet(true);
				}
				if (incoming.get(1)) {
					struct.template_params = iprot.readString();
					struct.setTemplate_paramsIsSet(true);
				}
				if (incoming.get(2)) {
					struct.template_slug = iprot.readString();
					struct.setTemplate_slugIsSet(true);
				}
			}
		}

	}

	public static class create_sms_template_result
			implements
			org.apache.thrift.TBase<create_sms_template_result, create_sms_template_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<create_sms_template_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_sms_template_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I64, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_sms_template_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_sms_template_resultTupleSchemeFactory());
		}

		public long success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I64,
									"TemplateId")));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_sms_template_result.class, metaDataMap);
		}

		public create_sms_template_result() {
		}

		public create_sms_template_result(long success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_sms_template_result(create_sms_template_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public create_sms_template_result deepCopy() {
			return new create_sms_template_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public long getSuccess() {
			return this.success;
		}

		public create_sms_template_result setSuccess(long success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public create_sms_template_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public create_sms_template_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public create_sms_template_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Long) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Long.valueOf(getSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_sms_template_result)
				return this.equals((create_sms_template_result) that);
			return false;
		}

		public boolean equals(create_sms_template_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(create_sms_template_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_sms_template_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_sms_template_resultStandardSchemeFactory
				implements SchemeFactory {
			public create_sms_template_resultStandardScheme getScheme() {
				return new create_sms_template_resultStandardScheme();
			}
		}

		private static class create_sms_template_resultStandardScheme extends
				StandardScheme<create_sms_template_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_sms_template_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.success = iprot.readI64();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_sms_template_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI64(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_sms_template_resultTupleSchemeFactory
				implements SchemeFactory {
			public create_sms_template_resultTupleScheme getScheme() {
				return new create_sms_template_resultTupleScheme();
			}
		}

		private static class create_sms_template_resultTupleScheme extends
				TupleScheme<create_sms_template_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_sms_template_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeI64(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_sms_template_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readI64();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class get_sms_template_verify_status_args
			implements
			org.apache.thrift.TBase<get_sms_template_verify_status_args, get_sms_template_verify_status_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<get_sms_template_verify_status_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_sms_template_verify_status_args");

		private static final org.apache.thrift.protocol.TField TEMPLATE_SLUG_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"template_slug", org.apache.thrift.protocol.TType.STRING,
				(short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(
					StandardScheme.class,
					new get_sms_template_verify_status_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new get_sms_template_verify_status_argsTupleSchemeFactory());
		}

		public String template_slug; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TEMPLATE_SLUG((short) 1, "template_slug");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TEMPLATE_SLUG
					return TEMPLATE_SLUG;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.TEMPLATE_SLUG,
					new org.apache.thrift.meta_data.FieldMetaData(
							"template_slug",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					get_sms_template_verify_status_args.class, metaDataMap);
		}

		public get_sms_template_verify_status_args() {
		}

		public get_sms_template_verify_status_args(String template_slug) {
			this();
			this.template_slug = template_slug;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_sms_template_verify_status_args(
				get_sms_template_verify_status_args other) {
			if (other.isSetTemplate_slug()) {
				this.template_slug = other.template_slug;
			}
		}

		public get_sms_template_verify_status_args deepCopy() {
			return new get_sms_template_verify_status_args(this);
		}

		public void clear() {
			this.template_slug = null;
		}

		public String getTemplate_slug() {
			return this.template_slug;
		}

		public get_sms_template_verify_status_args setTemplate_slug(
				String template_slug) {
			this.template_slug = template_slug;
			return this;
		}

		public void unsetTemplate_slug() {
			this.template_slug = null;
		}

		/**
		 * Returns true if field template_slug is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetTemplate_slug() {
			return this.template_slug != null;
		}

		public void setTemplate_slugIsSet(boolean value) {
			if (!value) {
				this.template_slug = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TEMPLATE_SLUG:
				if (value == null) {
					unsetTemplate_slug();
				} else {
					setTemplate_slug((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TEMPLATE_SLUG:
				return getTemplate_slug();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TEMPLATE_SLUG:
				return isSetTemplate_slug();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_sms_template_verify_status_args)
				return this.equals((get_sms_template_verify_status_args) that);
			return false;
		}

		public boolean equals(get_sms_template_verify_status_args that) {
			if (that == null)
				return false;

			boolean this_present_template_slug = true && this
					.isSetTemplate_slug();
			boolean that_present_template_slug = true && that
					.isSetTemplate_slug();
			if (this_present_template_slug || that_present_template_slug) {
				if (!(this_present_template_slug && that_present_template_slug))
					return false;
				if (!this.template_slug.equals(that.template_slug))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_template_slug = true && (isSetTemplate_slug());
			list.add(present_template_slug);
			if (present_template_slug)
				list.add(template_slug);

			return list.hashCode();
		}

		public int compareTo(get_sms_template_verify_status_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetTemplate_slug()).compareTo(
					other.isSetTemplate_slug());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTemplate_slug()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.template_slug, other.template_slug);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"get_sms_template_verify_status_args(");
			boolean first = true;

			sb.append("template_slug:");
			if (this.template_slug == null) {
				sb.append("null");
			} else {
				sb.append(this.template_slug);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_sms_template_verify_status_argsStandardSchemeFactory
				implements SchemeFactory {
			public get_sms_template_verify_status_argsStandardScheme getScheme() {
				return new get_sms_template_verify_status_argsStandardScheme();
			}
		}

		private static class get_sms_template_verify_status_argsStandardScheme
				extends StandardScheme<get_sms_template_verify_status_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					get_sms_template_verify_status_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TEMPLATE_SLUG
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.template_slug = iprot.readString();
							struct.setTemplate_slugIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					get_sms_template_verify_status_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.template_slug != null) {
					oprot.writeFieldBegin(TEMPLATE_SLUG_FIELD_DESC);
					oprot.writeString(struct.template_slug);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_sms_template_verify_status_argsTupleSchemeFactory
				implements SchemeFactory {
			public get_sms_template_verify_status_argsTupleScheme getScheme() {
				return new get_sms_template_verify_status_argsTupleScheme();
			}
		}

		private static class get_sms_template_verify_status_argsTupleScheme
				extends TupleScheme<get_sms_template_verify_status_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					get_sms_template_verify_status_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetTemplate_slug()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetTemplate_slug()) {
					oprot.writeString(struct.template_slug);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					get_sms_template_verify_status_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.template_slug = iprot.readString();
					struct.setTemplate_slugIsSet(true);
				}
			}
		}

	}

	public static class get_sms_template_verify_status_result
			implements
			org.apache.thrift.TBase<get_sms_template_verify_status_result, get_sms_template_verify_status_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<get_sms_template_verify_status_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_sms_template_verify_status_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(
					StandardScheme.class,
					new get_sms_template_verify_status_resultStandardSchemeFactory());
			schemes.put(
					TupleScheme.class,
					new get_sms_template_verify_status_resultTupleSchemeFactory());
		}

		/**
		 *
		 * @see THermesTemplateVerifyStatus
		 */
		public THermesTemplateVerifyStatus success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			/**
			 *
			 * @see THermesTemplateVerifyStatus
			 */
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.EnumMetaData(
									org.apache.thrift.protocol.TType.ENUM,
									THermesTemplateVerifyStatus.class)));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					get_sms_template_verify_status_result.class, metaDataMap);
		}

		public get_sms_template_verify_status_result() {
		}

		public get_sms_template_verify_status_result(
				THermesTemplateVerifyStatus success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_sms_template_verify_status_result(
				get_sms_template_verify_status_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public get_sms_template_verify_status_result deepCopy() {
			return new get_sms_template_verify_status_result(this);
		}

		public void clear() {
			this.success = null;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		/**
		 *
		 * @see THermesTemplateVerifyStatus
		 */
		public THermesTemplateVerifyStatus getSuccess() {
			return this.success;
		}

		/**
		 *
		 * @see THermesTemplateVerifyStatus
		 */
		public get_sms_template_verify_status_result setSuccess(
				THermesTemplateVerifyStatus success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public get_sms_template_verify_status_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public get_sms_template_verify_status_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public get_sms_template_verify_status_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((THermesTemplateVerifyStatus) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_sms_template_verify_status_result)
				return this
						.equals((get_sms_template_verify_status_result) that);
			return false;
		}

		public boolean equals(get_sms_template_verify_status_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success.getValue());

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(get_sms_template_verify_status_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"get_sms_template_verify_status_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_sms_template_verify_status_resultStandardSchemeFactory
				implements SchemeFactory {
			public get_sms_template_verify_status_resultStandardScheme getScheme() {
				return new get_sms_template_verify_status_resultStandardScheme();
			}
		}

		private static class get_sms_template_verify_status_resultStandardScheme
				extends StandardScheme<get_sms_template_verify_status_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					get_sms_template_verify_status_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = THermesTemplateVerifyStatus
									.findByValue(iprot.readI32());
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					get_sms_template_verify_status_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success.getValue());
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_sms_template_verify_status_resultTupleSchemeFactory
				implements SchemeFactory {
			public get_sms_template_verify_status_resultTupleScheme getScheme() {
				return new get_sms_template_verify_status_resultTupleScheme();
			}
		}

		private static class get_sms_template_verify_status_resultTupleScheme
				extends TupleScheme<get_sms_template_verify_status_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					get_sms_template_verify_status_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success.getValue());
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					get_sms_template_verify_status_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = THermesTemplateVerifyStatus
							.findByValue(iprot.readI32());
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class create_task_args
			implements
			org.apache.thrift.TBase<create_task_args, create_task_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<create_task_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_task_args");

		private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"param", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_task_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_task_argsTupleSchemeFactory());
		}

		public NormalTaskCreationParameter param; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAM((short) 1, "param");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAM
					return PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("param",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									NormalTaskCreationParameter.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_task_args.class, metaDataMap);
		}

		public create_task_args() {
		}

		public create_task_args(NormalTaskCreationParameter param) {
			this();
			this.param = param;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_task_args(create_task_args other) {
			if (other.isSetParam()) {
				this.param = new NormalTaskCreationParameter(other.param);
			}
		}

		public create_task_args deepCopy() {
			return new create_task_args(this);
		}

		public void clear() {
			this.param = null;
		}

		public NormalTaskCreationParameter getParam() {
			return this.param;
		}

		public create_task_args setParam(NormalTaskCreationParameter param) {
			this.param = param;
			return this;
		}

		public void unsetParam() {
			this.param = null;
		}

		/**
		 * Returns true if field param is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParam() {
			return this.param != null;
		}

		public void setParamIsSet(boolean value) {
			if (!value) {
				this.param = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAM:
				if (value == null) {
					unsetParam();
				} else {
					setParam((NormalTaskCreationParameter) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAM:
				return getParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAM:
				return isSetParam();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_task_args)
				return this.equals((create_task_args) that);
			return false;
		}

		public boolean equals(create_task_args that) {
			if (that == null)
				return false;

			boolean this_present_param = true && this.isSetParam();
			boolean that_present_param = true && that.isSetParam();
			if (this_present_param || that_present_param) {
				if (!(this_present_param && that_present_param))
					return false;
				if (!this.param.equals(that.param))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_param = true && (isSetParam());
			list.add(present_param);
			if (present_param)
				list.add(param);

			return list.hashCode();
		}

		public int compareTo(create_task_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParam()).compareTo(
					other.isSetParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.param, other.param);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_task_args(");
			boolean first = true;

			sb.append("param:");
			if (this.param == null) {
				sb.append("null");
			} else {
				sb.append(this.param);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (param != null) {
				param.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_task_argsStandardSchemeFactory implements
				SchemeFactory {
			public create_task_argsStandardScheme getScheme() {
				return new create_task_argsStandardScheme();
			}
		}

		private static class create_task_argsStandardScheme extends
				StandardScheme<create_task_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_task_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.param = new NormalTaskCreationParameter();
							struct.param.read(iprot);
							struct.setParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_task_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.param != null) {
					oprot.writeFieldBegin(PARAM_FIELD_DESC);
					struct.param.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_task_argsTupleSchemeFactory implements
				SchemeFactory {
			public create_task_argsTupleScheme getScheme() {
				return new create_task_argsTupleScheme();
			}
		}

		private static class create_task_argsTupleScheme extends
				TupleScheme<create_task_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_task_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParam()) {
					struct.param.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_task_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.param = new NormalTaskCreationParameter();
					struct.param.read(iprot);
					struct.setParamIsSet(true);
				}
			}
		}

	}

	public static class create_task_result
			implements
			org.apache.thrift.TBase<create_task_result, create_task_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<create_task_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_task_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I64, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_task_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_task_resultTupleSchemeFactory());
		}

		public long success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I64,
									"TaskId")));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_task_result.class, metaDataMap);
		}

		public create_task_result() {
		}

		public create_task_result(long success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_task_result(create_task_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public create_task_result deepCopy() {
			return new create_task_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public long getSuccess() {
			return this.success;
		}

		public create_task_result setSuccess(long success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public create_task_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public create_task_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public create_task_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Long) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Long.valueOf(getSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_task_result)
				return this.equals((create_task_result) that);
			return false;
		}

		public boolean equals(create_task_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(create_task_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_task_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_task_resultStandardSchemeFactory implements
				SchemeFactory {
			public create_task_resultStandardScheme getScheme() {
				return new create_task_resultStandardScheme();
			}
		}

		private static class create_task_resultStandardScheme extends
				StandardScheme<create_task_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_task_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.success = iprot.readI64();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_task_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI64(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_task_resultTupleSchemeFactory implements
				SchemeFactory {
			public create_task_resultTupleScheme getScheme() {
				return new create_task_resultTupleScheme();
			}
		}

		private static class create_task_resultTupleScheme extends
				TupleScheme<create_task_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_task_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeI64(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_task_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readI64();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class create_template_task_args
			implements
			org.apache.thrift.TBase<create_template_task_args, create_template_task_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<create_template_task_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_template_task_args");

		private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"param", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_template_task_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_template_task_argsTupleSchemeFactory());
		}

		public TemplateTaskCreationParameter param; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAM((short) 1, "param");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAM
					return PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("param",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									TemplateTaskCreationParameter.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_template_task_args.class, metaDataMap);
		}

		public create_template_task_args() {
		}

		public create_template_task_args(TemplateTaskCreationParameter param) {
			this();
			this.param = param;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_template_task_args(create_template_task_args other) {
			if (other.isSetParam()) {
				this.param = new TemplateTaskCreationParameter(other.param);
			}
		}

		public create_template_task_args deepCopy() {
			return new create_template_task_args(this);
		}

		public void clear() {
			this.param = null;
		}

		public TemplateTaskCreationParameter getParam() {
			return this.param;
		}

		public create_template_task_args setParam(
				TemplateTaskCreationParameter param) {
			this.param = param;
			return this;
		}

		public void unsetParam() {
			this.param = null;
		}

		/**
		 * Returns true if field param is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParam() {
			return this.param != null;
		}

		public void setParamIsSet(boolean value) {
			if (!value) {
				this.param = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAM:
				if (value == null) {
					unsetParam();
				} else {
					setParam((TemplateTaskCreationParameter) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAM:
				return getParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAM:
				return isSetParam();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_template_task_args)
				return this.equals((create_template_task_args) that);
			return false;
		}

		public boolean equals(create_template_task_args that) {
			if (that == null)
				return false;

			boolean this_present_param = true && this.isSetParam();
			boolean that_present_param = true && that.isSetParam();
			if (this_present_param || that_present_param) {
				if (!(this_present_param && that_present_param))
					return false;
				if (!this.param.equals(that.param))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_param = true && (isSetParam());
			list.add(present_param);
			if (present_param)
				list.add(param);

			return list.hashCode();
		}

		public int compareTo(create_template_task_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParam()).compareTo(
					other.isSetParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.param, other.param);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_template_task_args(");
			boolean first = true;

			sb.append("param:");
			if (this.param == null) {
				sb.append("null");
			} else {
				sb.append(this.param);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (param != null) {
				param.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_template_task_argsStandardSchemeFactory
				implements SchemeFactory {
			public create_template_task_argsStandardScheme getScheme() {
				return new create_template_task_argsStandardScheme();
			}
		}

		private static class create_template_task_argsStandardScheme extends
				StandardScheme<create_template_task_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_template_task_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.param = new TemplateTaskCreationParameter();
							struct.param.read(iprot);
							struct.setParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_template_task_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.param != null) {
					oprot.writeFieldBegin(PARAM_FIELD_DESC);
					struct.param.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_template_task_argsTupleSchemeFactory
				implements SchemeFactory {
			public create_template_task_argsTupleScheme getScheme() {
				return new create_template_task_argsTupleScheme();
			}
		}

		private static class create_template_task_argsTupleScheme extends
				TupleScheme<create_template_task_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_template_task_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParam()) {
					struct.param.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_template_task_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.param = new TemplateTaskCreationParameter();
					struct.param.read(iprot);
					struct.setParamIsSet(true);
				}
			}
		}

	}

	public static class create_template_task_result
			implements
			org.apache.thrift.TBase<create_template_task_result, create_template_task_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<create_template_task_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_template_task_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I64, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_template_task_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_template_task_resultTupleSchemeFactory());
		}

		public long success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I64,
									"TaskId")));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_template_task_result.class, metaDataMap);
		}

		public create_template_task_result() {
		}

		public create_template_task_result(long success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_template_task_result(create_template_task_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public create_template_task_result deepCopy() {
			return new create_template_task_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public long getSuccess() {
			return this.success;
		}

		public create_template_task_result setSuccess(long success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public create_template_task_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public create_template_task_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public create_template_task_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Long) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Long.valueOf(getSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_template_task_result)
				return this.equals((create_template_task_result) that);
			return false;
		}

		public boolean equals(create_template_task_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(create_template_task_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_template_task_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_template_task_resultStandardSchemeFactory
				implements SchemeFactory {
			public create_template_task_resultStandardScheme getScheme() {
				return new create_template_task_resultStandardScheme();
			}
		}

		private static class create_template_task_resultStandardScheme extends
				StandardScheme<create_template_task_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_template_task_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.success = iprot.readI64();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_template_task_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI64(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_template_task_resultTupleSchemeFactory
				implements SchemeFactory {
			public create_template_task_resultTupleScheme getScheme() {
				return new create_template_task_resultTupleScheme();
			}
		}

		private static class create_template_task_resultTupleScheme extends
				TupleScheme<create_template_task_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_template_task_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeI64(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_template_task_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readI64();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class create_audio_task_args
			implements
			org.apache.thrift.TBase<create_audio_task_args, create_audio_task_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<create_audio_task_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_audio_task_args");

		private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"param", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_audio_task_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_audio_task_argsTupleSchemeFactory());
		}

		public AudioTaskCreationParameter param; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAM((short) 1, "param");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAM
					return PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("param",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									AudioTaskCreationParameter.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_audio_task_args.class, metaDataMap);
		}

		public create_audio_task_args() {
		}

		public create_audio_task_args(AudioTaskCreationParameter param) {
			this();
			this.param = param;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_audio_task_args(create_audio_task_args other) {
			if (other.isSetParam()) {
				this.param = new AudioTaskCreationParameter(other.param);
			}
		}

		public create_audio_task_args deepCopy() {
			return new create_audio_task_args(this);
		}

		public void clear() {
			this.param = null;
		}

		public AudioTaskCreationParameter getParam() {
			return this.param;
		}

		public create_audio_task_args setParam(AudioTaskCreationParameter param) {
			this.param = param;
			return this;
		}

		public void unsetParam() {
			this.param = null;
		}

		/**
		 * Returns true if field param is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParam() {
			return this.param != null;
		}

		public void setParamIsSet(boolean value) {
			if (!value) {
				this.param = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAM:
				if (value == null) {
					unsetParam();
				} else {
					setParam((AudioTaskCreationParameter) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAM:
				return getParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAM:
				return isSetParam();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_audio_task_args)
				return this.equals((create_audio_task_args) that);
			return false;
		}

		public boolean equals(create_audio_task_args that) {
			if (that == null)
				return false;

			boolean this_present_param = true && this.isSetParam();
			boolean that_present_param = true && that.isSetParam();
			if (this_present_param || that_present_param) {
				if (!(this_present_param && that_present_param))
					return false;
				if (!this.param.equals(that.param))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_param = true && (isSetParam());
			list.add(present_param);
			if (present_param)
				list.add(param);

			return list.hashCode();
		}

		public int compareTo(create_audio_task_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParam()).compareTo(
					other.isSetParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.param, other.param);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_audio_task_args(");
			boolean first = true;

			sb.append("param:");
			if (this.param == null) {
				sb.append("null");
			} else {
				sb.append(this.param);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (param != null) {
				param.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_audio_task_argsStandardSchemeFactory
				implements SchemeFactory {
			public create_audio_task_argsStandardScheme getScheme() {
				return new create_audio_task_argsStandardScheme();
			}
		}

		private static class create_audio_task_argsStandardScheme extends
				StandardScheme<create_audio_task_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_audio_task_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.param = new AudioTaskCreationParameter();
							struct.param.read(iprot);
							struct.setParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_audio_task_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.param != null) {
					oprot.writeFieldBegin(PARAM_FIELD_DESC);
					struct.param.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_audio_task_argsTupleSchemeFactory implements
				SchemeFactory {
			public create_audio_task_argsTupleScheme getScheme() {
				return new create_audio_task_argsTupleScheme();
			}
		}

		private static class create_audio_task_argsTupleScheme extends
				TupleScheme<create_audio_task_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_audio_task_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParam()) {
					struct.param.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_audio_task_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.param = new AudioTaskCreationParameter();
					struct.param.read(iprot);
					struct.setParamIsSet(true);
				}
			}
		}

	}

	public static class create_audio_task_result
			implements
			org.apache.thrift.TBase<create_audio_task_result, create_audio_task_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<create_audio_task_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"create_audio_task_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I64, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new create_audio_task_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new create_audio_task_resultTupleSchemeFactory());
		}

		public long success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I64,
									"TaskId")));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					create_audio_task_result.class, metaDataMap);
		}

		public create_audio_task_result() {
		}

		public create_audio_task_result(long success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public create_audio_task_result(create_audio_task_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public create_audio_task_result deepCopy() {
			return new create_audio_task_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public long getSuccess() {
			return this.success;
		}

		public create_audio_task_result setSuccess(long success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public create_audio_task_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public create_audio_task_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public create_audio_task_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Long) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Long.valueOf(getSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof create_audio_task_result)
				return this.equals((create_audio_task_result) that);
			return false;
		}

		public boolean equals(create_audio_task_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(create_audio_task_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("create_audio_task_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class create_audio_task_resultStandardSchemeFactory
				implements SchemeFactory {
			public create_audio_task_resultStandardScheme getScheme() {
				return new create_audio_task_resultStandardScheme();
			}
		}

		private static class create_audio_task_resultStandardScheme extends
				StandardScheme<create_audio_task_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					create_audio_task_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.success = iprot.readI64();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					create_audio_task_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI64(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class create_audio_task_resultTupleSchemeFactory
				implements SchemeFactory {
			public create_audio_task_resultTupleScheme getScheme() {
				return new create_audio_task_resultTupleScheme();
			}
		}

		private static class create_audio_task_resultTupleScheme extends
				TupleScheme<create_audio_task_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					create_audio_task_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeI64(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					create_audio_task_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readI64();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class get_task_status_args
			implements
			org.apache.thrift.TBase<get_task_status_args, get_task_status_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<get_task_status_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_task_status_args");

		private static final org.apache.thrift.protocol.TField TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"task_ids", org.apache.thrift.protocol.TType.LIST, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new get_task_status_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new get_task_status_argsTupleSchemeFactory());
		}

		public List<Long> task_ids; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			TASK_IDS((short) 1, "task_ids");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // TASK_IDS
					return TASK_IDS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.TASK_IDS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"task_ids",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(
									org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.I64,
											"TaskId"))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					get_task_status_args.class, metaDataMap);
		}

		public get_task_status_args() {
		}

		public get_task_status_args(List<Long> task_ids) {
			this();
			this.task_ids = task_ids;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_task_status_args(get_task_status_args other) {
			if (other.isSetTask_ids()) {
				List<Long> __this__task_ids = new ArrayList<Long>(
						other.task_ids.size());
				for (Long other_element : other.task_ids) {
					__this__task_ids.add(other_element);
				}
				this.task_ids = __this__task_ids;
			}
		}

		public get_task_status_args deepCopy() {
			return new get_task_status_args(this);
		}

		public void clear() {
			this.task_ids = null;
		}

		public int getTask_idsSize() {
			return (this.task_ids == null) ? 0 : this.task_ids.size();
		}

		public java.util.Iterator<Long> getTask_idsIterator() {
			return (this.task_ids == null) ? null : this.task_ids.iterator();
		}

		public void addToTask_ids(long elem) {
			if (this.task_ids == null) {
				this.task_ids = new ArrayList<Long>();
			}
			this.task_ids.add(elem);
		}

		public List<Long> getTask_ids() {
			return this.task_ids;
		}

		public get_task_status_args setTask_ids(List<Long> task_ids) {
			this.task_ids = task_ids;
			return this;
		}

		public void unsetTask_ids() {
			this.task_ids = null;
		}

		/**
		 * Returns true if field task_ids is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetTask_ids() {
			return this.task_ids != null;
		}

		public void setTask_idsIsSet(boolean value) {
			if (!value) {
				this.task_ids = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case TASK_IDS:
				if (value == null) {
					unsetTask_ids();
				} else {
					setTask_ids((List<Long>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case TASK_IDS:
				return getTask_ids();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case TASK_IDS:
				return isSetTask_ids();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_task_status_args)
				return this.equals((get_task_status_args) that);
			return false;
		}

		public boolean equals(get_task_status_args that) {
			if (that == null)
				return false;

			boolean this_present_task_ids = true && this.isSetTask_ids();
			boolean that_present_task_ids = true && that.isSetTask_ids();
			if (this_present_task_ids || that_present_task_ids) {
				if (!(this_present_task_ids && that_present_task_ids))
					return false;
				if (!this.task_ids.equals(that.task_ids))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_task_ids = true && (isSetTask_ids());
			list.add(present_task_ids);
			if (present_task_ids)
				list.add(task_ids);

			return list.hashCode();
		}

		public int compareTo(get_task_status_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetTask_ids()).compareTo(
					other.isSetTask_ids());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTask_ids()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.task_ids, other.task_ids);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("get_task_status_args(");
			boolean first = true;

			sb.append("task_ids:");
			if (this.task_ids == null) {
				sb.append("null");
			} else {
				sb.append(this.task_ids);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_task_status_argsStandardSchemeFactory
				implements SchemeFactory {
			public get_task_status_argsStandardScheme getScheme() {
				return new get_task_status_argsStandardScheme();
			}
		}

		private static class get_task_status_argsStandardScheme extends
				StandardScheme<get_task_status_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					get_task_status_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // TASK_IDS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list0 = iprot
										.readListBegin();
								struct.task_ids = new ArrayList<Long>(
										_list0.size);
								long _elem1;
								for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
									_elem1 = iprot.readI64();
									struct.task_ids.add(_elem1);
								}
								iprot.readListEnd();
							}
							struct.setTask_idsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					get_task_status_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.task_ids != null) {
					oprot.writeFieldBegin(TASK_IDS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.I64,
								struct.task_ids.size()));
						for (long _iter3 : struct.task_ids) {
							oprot.writeI64(_iter3);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_task_status_argsTupleSchemeFactory implements
				SchemeFactory {
			public get_task_status_argsTupleScheme getScheme() {
				return new get_task_status_argsTupleScheme();
			}
		}

		private static class get_task_status_argsTupleScheme extends
				TupleScheme<get_task_status_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					get_task_status_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetTask_ids()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetTask_ids()) {
					{
						oprot.writeI32(struct.task_ids.size());
						for (long _iter4 : struct.task_ids) {
							oprot.writeI64(_iter4);
						}
					}
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					get_task_status_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.I64,
								iprot.readI32());
						struct.task_ids = new ArrayList<Long>(_list5.size);
						long _elem6;
						for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
							_elem6 = iprot.readI64();
							struct.task_ids.add(_elem6);
						}
					}
					struct.setTask_idsIsSet(true);
				}
			}
		}

	}

	public static class get_task_status_result
			implements
			org.apache.thrift.TBase<get_task_status_result, get_task_status_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<get_task_status_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_task_status_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.MAP, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new get_task_status_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new get_task_status_resultTupleSchemeFactory());
		}

		public Map<Long, THermesTaskStatus> success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.MapMetaData(
									org.apache.thrift.protocol.TType.MAP,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.I64,
											"TaskId"),
									new org.apache.thrift.meta_data.EnumMetaData(
											org.apache.thrift.protocol.TType.ENUM,
											THermesTaskStatus.class))));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					get_task_status_result.class, metaDataMap);
		}

		public get_task_status_result() {
		}

		public get_task_status_result(Map<Long, THermesTaskStatus> success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_task_status_result(get_task_status_result other) {
			if (other.isSetSuccess()) {
				Map<Long, THermesTaskStatus> __this__success = new HashMap<Long, THermesTaskStatus>(
						other.success.size());
				for (Map.Entry<Long, THermesTaskStatus> other_element : other.success
						.entrySet()) {

					Long other_element_key = other_element.getKey();
					THermesTaskStatus other_element_value = other_element
							.getValue();

					Long __this__success_copy_key = other_element_key;

					THermesTaskStatus __this__success_copy_value = other_element_value;

					__this__success.put(__this__success_copy_key,
							__this__success_copy_value);
				}
				this.success = __this__success;
			}
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public get_task_status_result deepCopy() {
			return new get_task_status_result(this);
		}

		public void clear() {
			this.success = null;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public void putToSuccess(long key, THermesTaskStatus val) {
			if (this.success == null) {
				this.success = new HashMap<Long, THermesTaskStatus>();
			}
			this.success.put(key, val);
		}

		public Map<Long, THermesTaskStatus> getSuccess() {
			return this.success;
		}

		public get_task_status_result setSuccess(
				Map<Long, THermesTaskStatus> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public get_task_status_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public get_task_status_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public get_task_status_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Map<Long, THermesTaskStatus>) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_task_status_result)
				return this.equals((get_task_status_result) that);
			return false;
		}

		public boolean equals(get_task_status_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(get_task_status_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("get_task_status_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_task_status_resultStandardSchemeFactory
				implements SchemeFactory {
			public get_task_status_resultStandardScheme getScheme() {
				return new get_task_status_resultStandardScheme();
			}
		}

		private static class get_task_status_resultStandardScheme extends
				StandardScheme<get_task_status_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					get_task_status_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							{
								org.apache.thrift.protocol.TMap _map8 = iprot
										.readMapBegin();
								struct.success = new HashMap<Long, THermesTaskStatus>(
										2 * _map8.size);
								long _key9;
								THermesTaskStatus _val10;
								for (int _i11 = 0; _i11 < _map8.size; ++_i11) {
									_key9 = iprot.readI64();
									_val10 = THermesTaskStatus
											.findByValue(iprot.readI32());
									struct.success.put(_key9, _val10);
								}
								iprot.readMapEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					get_task_status_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I64,
								org.apache.thrift.protocol.TType.I32,
								struct.success.size()));
						for (Map.Entry<Long, THermesTaskStatus> _iter12 : struct.success
								.entrySet()) {
							oprot.writeI64(_iter12.getKey());
							oprot.writeI32(_iter12.getValue().getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_task_status_resultTupleSchemeFactory implements
				SchemeFactory {
			public get_task_status_resultTupleScheme getScheme() {
				return new get_task_status_resultTupleScheme();
			}
		}

		private static class get_task_status_resultTupleScheme extends
				TupleScheme<get_task_status_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					get_task_status_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (Map.Entry<Long, THermesTaskStatus> _iter13 : struct.success
								.entrySet()) {
							oprot.writeI64(_iter13.getKey());
							oprot.writeI32(_iter13.getValue().getValue());
						}
					}
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					get_task_status_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(
								org.apache.thrift.protocol.TType.I64,
								org.apache.thrift.protocol.TType.I32,
								iprot.readI32());
						struct.success = new HashMap<Long, THermesTaskStatus>(
								2 * _map14.size);
						long _key15;
						THermesTaskStatus _val16;
						for (int _i17 = 0; _i17 < _map14.size; ++_i17) {
							_key15 = iprot.readI64();
							_val16 = THermesTaskStatus.findByValue(iprot
									.readI32());
							struct.success.put(_key15, _val16);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class get_user_reply_args
			implements
			org.apache.thrift.TBase<get_user_reply_args, get_user_reply_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<get_user_reply_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_user_reply_args");

		private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"phone_number", org.apache.thrift.protocol.TType.STRING,
				(short) 1);
		private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"timestamp", org.apache.thrift.protocol.TType.I64, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new get_user_reply_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new get_user_reply_argsTupleSchemeFactory());
		}

		public String phone_number; // required
		public long timestamp; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PHONE_NUMBER((short) 1, "phone_number"), TIMESTAMP((short) 2,
					"timestamp");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PHONE_NUMBER
					return PHONE_NUMBER;
				case 2: // TIMESTAMP
					return TIMESTAMP;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __TIMESTAMP_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PHONE_NUMBER,
					new org.apache.thrift.meta_data.FieldMetaData(
							"phone_number",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TIMESTAMP,
					new org.apache.thrift.meta_data.FieldMetaData("timestamp",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I64,
									"Timestamp")));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					get_user_reply_args.class, metaDataMap);
		}

		public get_user_reply_args() {
		}

		public get_user_reply_args(String phone_number, long timestamp) {
			this();
			this.phone_number = phone_number;
			this.timestamp = timestamp;
			setTimestampIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_user_reply_args(get_user_reply_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetPhone_number()) {
				this.phone_number = other.phone_number;
			}
			this.timestamp = other.timestamp;
		}

		public get_user_reply_args deepCopy() {
			return new get_user_reply_args(this);
		}

		public void clear() {
			this.phone_number = null;
			setTimestampIsSet(false);
			this.timestamp = 0;
		}

		public String getPhone_number() {
			return this.phone_number;
		}

		public get_user_reply_args setPhone_number(String phone_number) {
			this.phone_number = phone_number;
			return this;
		}

		public void unsetPhone_number() {
			this.phone_number = null;
		}

		/**
		 * Returns true if field phone_number is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetPhone_number() {
			return this.phone_number != null;
		}

		public void setPhone_numberIsSet(boolean value) {
			if (!value) {
				this.phone_number = null;
			}
		}

		public long getTimestamp() {
			return this.timestamp;
		}

		public get_user_reply_args setTimestamp(long timestamp) {
			this.timestamp = timestamp;
			setTimestampIsSet(true);
			return this;
		}

		public void unsetTimestamp() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__TIMESTAMP_ISSET_ID);
		}

		/**
		 * Returns true if field timestamp is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetTimestamp() {
			return EncodingUtils
					.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
		}

		public void setTimestampIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__TIMESTAMP_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PHONE_NUMBER:
				if (value == null) {
					unsetPhone_number();
				} else {
					setPhone_number((String) value);
				}
				break;

			case TIMESTAMP:
				if (value == null) {
					unsetTimestamp();
				} else {
					setTimestamp((Long) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PHONE_NUMBER:
				return getPhone_number();

			case TIMESTAMP:
				return Long.valueOf(getTimestamp());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PHONE_NUMBER:
				return isSetPhone_number();
			case TIMESTAMP:
				return isSetTimestamp();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_user_reply_args)
				return this.equals((get_user_reply_args) that);
			return false;
		}

		public boolean equals(get_user_reply_args that) {
			if (that == null)
				return false;

			boolean this_present_phone_number = true && this
					.isSetPhone_number();
			boolean that_present_phone_number = true && that
					.isSetPhone_number();
			if (this_present_phone_number || that_present_phone_number) {
				if (!(this_present_phone_number && that_present_phone_number))
					return false;
				if (!this.phone_number.equals(that.phone_number))
					return false;
			}

			boolean this_present_timestamp = true;
			boolean that_present_timestamp = true;
			if (this_present_timestamp || that_present_timestamp) {
				if (!(this_present_timestamp && that_present_timestamp))
					return false;
				if (this.timestamp != that.timestamp)
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_phone_number = true && (isSetPhone_number());
			list.add(present_phone_number);
			if (present_phone_number)
				list.add(phone_number);

			boolean present_timestamp = true;
			list.add(present_timestamp);
			if (present_timestamp)
				list.add(timestamp);

			return list.hashCode();
		}

		public int compareTo(get_user_reply_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetPhone_number()).compareTo(
					other.isSetPhone_number());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPhone_number()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.phone_number, other.phone_number);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(
					other.isSetTimestamp());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTimestamp()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.timestamp, other.timestamp);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("get_user_reply_args(");
			boolean first = true;

			sb.append("phone_number:");
			if (this.phone_number == null) {
				sb.append("null");
			} else {
				sb.append(this.phone_number);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("timestamp:");
			sb.append(this.timestamp);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_user_reply_argsStandardSchemeFactory implements
				SchemeFactory {
			public get_user_reply_argsStandardScheme getScheme() {
				return new get_user_reply_argsStandardScheme();
			}
		}

		private static class get_user_reply_argsStandardScheme extends
				StandardScheme<get_user_reply_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					get_user_reply_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PHONE_NUMBER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.phone_number = iprot.readString();
							struct.setPhone_numberIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // TIMESTAMP
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.timestamp = iprot.readI64();
							struct.setTimestampIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					get_user_reply_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.phone_number != null) {
					oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
					oprot.writeString(struct.phone_number);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
				oprot.writeI64(struct.timestamp);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_user_reply_argsTupleSchemeFactory implements
				SchemeFactory {
			public get_user_reply_argsTupleScheme getScheme() {
				return new get_user_reply_argsTupleScheme();
			}
		}

		private static class get_user_reply_argsTupleScheme extends
				TupleScheme<get_user_reply_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					get_user_reply_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetPhone_number()) {
					optionals.set(0);
				}
				if (struct.isSetTimestamp()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetPhone_number()) {
					oprot.writeString(struct.phone_number);
				}
				if (struct.isSetTimestamp()) {
					oprot.writeI64(struct.timestamp);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					get_user_reply_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.phone_number = iprot.readString();
					struct.setPhone_numberIsSet(true);
				}
				if (incoming.get(1)) {
					struct.timestamp = iprot.readI64();
					struct.setTimestampIsSet(true);
				}
			}
		}

	}

	public static class get_user_reply_result
			implements
			org.apache.thrift.TBase<get_user_reply_result, get_user_reply_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<get_user_reply_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_user_reply_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new get_user_reply_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new get_user_reply_resultTupleSchemeFactory());
		}

		public List<THermesUserReply> success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(
									org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.StructMetaData(
											org.apache.thrift.protocol.TType.STRUCT,
											THermesUserReply.class))));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					get_user_reply_result.class, metaDataMap);
		}

		public get_user_reply_result() {
		}

		public get_user_reply_result(List<THermesUserReply> success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_user_reply_result(get_user_reply_result other) {
			if (other.isSetSuccess()) {
				List<THermesUserReply> __this__success = new ArrayList<THermesUserReply>(
						other.success.size());
				for (THermesUserReply other_element : other.success) {
					__this__success.add(new THermesUserReply(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public get_user_reply_result deepCopy() {
			return new get_user_reply_result(this);
		}

		public void clear() {
			this.success = null;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<THermesUserReply> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(THermesUserReply elem) {
			if (this.success == null) {
				this.success = new ArrayList<THermesUserReply>();
			}
			this.success.add(elem);
		}

		public List<THermesUserReply> getSuccess() {
			return this.success;
		}

		public get_user_reply_result setSuccess(List<THermesUserReply> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public get_user_reply_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public get_user_reply_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public get_user_reply_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<THermesUserReply>) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_user_reply_result)
				return this.equals((get_user_reply_result) that);
			return false;
		}

		public boolean equals(get_user_reply_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(get_user_reply_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("get_user_reply_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_user_reply_resultStandardSchemeFactory
				implements SchemeFactory {
			public get_user_reply_resultStandardScheme getScheme() {
				return new get_user_reply_resultStandardScheme();
			}
		}

		private static class get_user_reply_resultStandardScheme extends
				StandardScheme<get_user_reply_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					get_user_reply_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list18 = iprot
										.readListBegin();
								struct.success = new ArrayList<THermesUserReply>(
										_list18.size);
								THermesUserReply _elem19;
								for (int _i20 = 0; _i20 < _list18.size; ++_i20) {
									_elem19 = new THermesUserReply();
									_elem19.read(iprot);
									struct.success.add(_elem19);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					get_user_reply_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT,
								struct.success.size()));
						for (THermesUserReply _iter21 : struct.success) {
							_iter21.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_user_reply_resultTupleSchemeFactory implements
				SchemeFactory {
			public get_user_reply_resultTupleScheme getScheme() {
				return new get_user_reply_resultTupleScheme();
			}
		}

		private static class get_user_reply_resultTupleScheme extends
				TupleScheme<get_user_reply_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					get_user_reply_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (THermesUserReply _iter22 : struct.success) {
							_iter22.write(oprot);
						}
					}
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					get_user_reply_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT,
								iprot.readI32());
						struct.success = new ArrayList<THermesUserReply>(
								_list23.size);
						THermesUserReply _elem24;
						for (int _i25 = 0; _i25 < _list23.size; ++_i25) {
							_elem24 = new THermesUserReply();
							_elem24.read(iprot);
							struct.success.add(_elem24);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class verify_code_create_args
			implements
			org.apache.thrift.TBase<verify_code_create_args, verify_code_create_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<verify_code_create_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"verify_code_create_args");

		private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"param", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new verify_code_create_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new verify_code_create_argsTupleSchemeFactory());
		}

		public VerifyCodeCreationParameter param; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			PARAM((short) 1, "param");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PARAM
					return PARAM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PARAM,
					new org.apache.thrift.meta_data.FieldMetaData("param",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									VerifyCodeCreationParameter.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					verify_code_create_args.class, metaDataMap);
		}

		public verify_code_create_args() {
		}

		public verify_code_create_args(VerifyCodeCreationParameter param) {
			this();
			this.param = param;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public verify_code_create_args(verify_code_create_args other) {
			if (other.isSetParam()) {
				this.param = new VerifyCodeCreationParameter(other.param);
			}
		}

		public verify_code_create_args deepCopy() {
			return new verify_code_create_args(this);
		}

		public void clear() {
			this.param = null;
		}

		public VerifyCodeCreationParameter getParam() {
			return this.param;
		}

		public verify_code_create_args setParam(
				VerifyCodeCreationParameter param) {
			this.param = param;
			return this;
		}

		public void unsetParam() {
			this.param = null;
		}

		/**
		 * Returns true if field param is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetParam() {
			return this.param != null;
		}

		public void setParamIsSet(boolean value) {
			if (!value) {
				this.param = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case PARAM:
				if (value == null) {
					unsetParam();
				} else {
					setParam((VerifyCodeCreationParameter) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case PARAM:
				return getParam();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case PARAM:
				return isSetParam();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof verify_code_create_args)
				return this.equals((verify_code_create_args) that);
			return false;
		}

		public boolean equals(verify_code_create_args that) {
			if (that == null)
				return false;

			boolean this_present_param = true && this.isSetParam();
			boolean that_present_param = true && that.isSetParam();
			if (this_present_param || that_present_param) {
				if (!(this_present_param && that_present_param))
					return false;
				if (!this.param.equals(that.param))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_param = true && (isSetParam());
			list.add(present_param);
			if (present_param)
				list.add(param);

			return list.hashCode();
		}

		public int compareTo(verify_code_create_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetParam()).compareTo(
					other.isSetParam());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetParam()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.param, other.param);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("verify_code_create_args(");
			boolean first = true;

			sb.append("param:");
			if (this.param == null) {
				sb.append("null");
			} else {
				sb.append(this.param);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (param != null) {
				param.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class verify_code_create_argsStandardSchemeFactory
				implements SchemeFactory {
			public verify_code_create_argsStandardScheme getScheme() {
				return new verify_code_create_argsStandardScheme();
			}
		}

		private static class verify_code_create_argsStandardScheme extends
				StandardScheme<verify_code_create_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					verify_code_create_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PARAM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.param = new VerifyCodeCreationParameter();
							struct.param.read(iprot);
							struct.setParamIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					verify_code_create_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.param != null) {
					oprot.writeFieldBegin(PARAM_FIELD_DESC);
					struct.param.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class verify_code_create_argsTupleSchemeFactory
				implements SchemeFactory {
			public verify_code_create_argsTupleScheme getScheme() {
				return new verify_code_create_argsTupleScheme();
			}
		}

		private static class verify_code_create_argsTupleScheme extends
				TupleScheme<verify_code_create_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					verify_code_create_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetParam()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetParam()) {
					struct.param.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					verify_code_create_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.param = new VerifyCodeCreationParameter();
					struct.param.read(iprot);
					struct.setParamIsSet(true);
				}
			}
		}

	}

	public static class verify_code_create_result
			implements
			org.apache.thrift.TBase<verify_code_create_result, verify_code_create_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<verify_code_create_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"verify_code_create_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new verify_code_create_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new verify_code_create_resultTupleSchemeFactory());
		}

		public VerifyCodeCreationResult success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT,
									VerifyCodeCreationResult.class)));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					verify_code_create_result.class, metaDataMap);
		}

		public verify_code_create_result() {
		}

		public verify_code_create_result(VerifyCodeCreationResult success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public verify_code_create_result(verify_code_create_result other) {
			if (other.isSetSuccess()) {
				this.success = new VerifyCodeCreationResult(other.success);
			}
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public verify_code_create_result deepCopy() {
			return new verify_code_create_result(this);
		}

		public void clear() {
			this.success = null;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public VerifyCodeCreationResult getSuccess() {
			return this.success;
		}

		public verify_code_create_result setSuccess(
				VerifyCodeCreationResult success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public verify_code_create_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public verify_code_create_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public verify_code_create_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((VerifyCodeCreationResult) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof verify_code_create_result)
				return this.equals((verify_code_create_result) that);
			return false;
		}

		public boolean equals(verify_code_create_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(verify_code_create_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("verify_code_create_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class verify_code_create_resultStandardSchemeFactory
				implements SchemeFactory {
			public verify_code_create_resultStandardScheme getScheme() {
				return new verify_code_create_resultStandardScheme();
			}
		}

		private static class verify_code_create_resultStandardScheme extends
				StandardScheme<verify_code_create_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					verify_code_create_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new VerifyCodeCreationResult();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					verify_code_create_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class verify_code_create_resultTupleSchemeFactory
				implements SchemeFactory {
			public verify_code_create_resultTupleScheme getScheme() {
				return new verify_code_create_resultTupleScheme();
			}
		}

		private static class verify_code_create_resultTupleScheme extends
				TupleScheme<verify_code_create_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					verify_code_create_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					verify_code_create_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = new VerifyCodeCreationResult();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class verify_code_validate_args
			implements
			org.apache.thrift.TBase<verify_code_validate_args, verify_code_validate_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<verify_code_validate_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"verify_code_validate_args");

		private static final org.apache.thrift.protocol.TField HASH_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"hash_value", org.apache.thrift.protocol.TType.STRING,
				(short) 1);
		private static final org.apache.thrift.protocol.TField VERIFY_CODE_TO_VALIDATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"verify_code_to_validate",
				org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new verify_code_validate_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new verify_code_validate_argsTupleSchemeFactory());
		}

		public String hash_value; // required
		public String verify_code_to_validate; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			HASH_VALUE((short) 1, "hash_value"), VERIFY_CODE_TO_VALIDATE(
					(short) 2, "verify_code_to_validate");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // HASH_VALUE
					return HASH_VALUE;
				case 2: // VERIFY_CODE_TO_VALIDATE
					return VERIFY_CODE_TO_VALIDATE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.HASH_VALUE,
					new org.apache.thrift.meta_data.FieldMetaData("hash_value",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERIFY_CODE_TO_VALIDATE,
					new org.apache.thrift.meta_data.FieldMetaData(
							"verify_code_to_validate",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					verify_code_validate_args.class, metaDataMap);
		}

		public verify_code_validate_args() {
		}

		public verify_code_validate_args(String hash_value,
				String verify_code_to_validate) {
			this();
			this.hash_value = hash_value;
			this.verify_code_to_validate = verify_code_to_validate;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public verify_code_validate_args(verify_code_validate_args other) {
			if (other.isSetHash_value()) {
				this.hash_value = other.hash_value;
			}
			if (other.isSetVerify_code_to_validate()) {
				this.verify_code_to_validate = other.verify_code_to_validate;
			}
		}

		public verify_code_validate_args deepCopy() {
			return new verify_code_validate_args(this);
		}

		public void clear() {
			this.hash_value = null;
			this.verify_code_to_validate = null;
		}

		public String getHash_value() {
			return this.hash_value;
		}

		public verify_code_validate_args setHash_value(String hash_value) {
			this.hash_value = hash_value;
			return this;
		}

		public void unsetHash_value() {
			this.hash_value = null;
		}

		/**
		 * Returns true if field hash_value is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetHash_value() {
			return this.hash_value != null;
		}

		public void setHash_valueIsSet(boolean value) {
			if (!value) {
				this.hash_value = null;
			}
		}

		public String getVerify_code_to_validate() {
			return this.verify_code_to_validate;
		}

		public verify_code_validate_args setVerify_code_to_validate(
				String verify_code_to_validate) {
			this.verify_code_to_validate = verify_code_to_validate;
			return this;
		}

		public void unsetVerify_code_to_validate() {
			this.verify_code_to_validate = null;
		}

		/**
		 * Returns true if field verify_code_to_validate is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSetVerify_code_to_validate() {
			return this.verify_code_to_validate != null;
		}

		public void setVerify_code_to_validateIsSet(boolean value) {
			if (!value) {
				this.verify_code_to_validate = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case HASH_VALUE:
				if (value == null) {
					unsetHash_value();
				} else {
					setHash_value((String) value);
				}
				break;

			case VERIFY_CODE_TO_VALIDATE:
				if (value == null) {
					unsetVerify_code_to_validate();
				} else {
					setVerify_code_to_validate((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case HASH_VALUE:
				return getHash_value();

			case VERIFY_CODE_TO_VALIDATE:
				return getVerify_code_to_validate();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case HASH_VALUE:
				return isSetHash_value();
			case VERIFY_CODE_TO_VALIDATE:
				return isSetVerify_code_to_validate();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof verify_code_validate_args)
				return this.equals((verify_code_validate_args) that);
			return false;
		}

		public boolean equals(verify_code_validate_args that) {
			if (that == null)
				return false;

			boolean this_present_hash_value = true && this.isSetHash_value();
			boolean that_present_hash_value = true && that.isSetHash_value();
			if (this_present_hash_value || that_present_hash_value) {
				if (!(this_present_hash_value && that_present_hash_value))
					return false;
				if (!this.hash_value.equals(that.hash_value))
					return false;
			}

			boolean this_present_verify_code_to_validate = true && this
					.isSetVerify_code_to_validate();
			boolean that_present_verify_code_to_validate = true && that
					.isSetVerify_code_to_validate();
			if (this_present_verify_code_to_validate
					|| that_present_verify_code_to_validate) {
				if (!(this_present_verify_code_to_validate && that_present_verify_code_to_validate))
					return false;
				if (!this.verify_code_to_validate
						.equals(that.verify_code_to_validate))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_hash_value = true && (isSetHash_value());
			list.add(present_hash_value);
			if (present_hash_value)
				list.add(hash_value);

			boolean present_verify_code_to_validate = true && (isSetVerify_code_to_validate());
			list.add(present_verify_code_to_validate);
			if (present_verify_code_to_validate)
				list.add(verify_code_to_validate);

			return list.hashCode();
		}

		public int compareTo(verify_code_validate_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetHash_value()).compareTo(
					other.isSetHash_value());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetHash_value()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.hash_value, other.hash_value);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVerify_code_to_validate())
					.compareTo(other.isSetVerify_code_to_validate());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVerify_code_to_validate()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.verify_code_to_validate,
						other.verify_code_to_validate);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("verify_code_validate_args(");
			boolean first = true;

			sb.append("hash_value:");
			if (this.hash_value == null) {
				sb.append("null");
			} else {
				sb.append(this.hash_value);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("verify_code_to_validate:");
			if (this.verify_code_to_validate == null) {
				sb.append("null");
			} else {
				sb.append(this.verify_code_to_validate);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class verify_code_validate_argsStandardSchemeFactory
				implements SchemeFactory {
			public verify_code_validate_argsStandardScheme getScheme() {
				return new verify_code_validate_argsStandardScheme();
			}
		}

		private static class verify_code_validate_argsStandardScheme extends
				StandardScheme<verify_code_validate_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					verify_code_validate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // HASH_VALUE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.hash_value = iprot.readString();
							struct.setHash_valueIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // VERIFY_CODE_TO_VALIDATE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.verify_code_to_validate = iprot.readString();
							struct.setVerify_code_to_validateIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					verify_code_validate_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.hash_value != null) {
					oprot.writeFieldBegin(HASH_VALUE_FIELD_DESC);
					oprot.writeString(struct.hash_value);
					oprot.writeFieldEnd();
				}
				if (struct.verify_code_to_validate != null) {
					oprot.writeFieldBegin(VERIFY_CODE_TO_VALIDATE_FIELD_DESC);
					oprot.writeString(struct.verify_code_to_validate);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class verify_code_validate_argsTupleSchemeFactory
				implements SchemeFactory {
			public verify_code_validate_argsTupleScheme getScheme() {
				return new verify_code_validate_argsTupleScheme();
			}
		}

		private static class verify_code_validate_argsTupleScheme extends
				TupleScheme<verify_code_validate_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					verify_code_validate_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetHash_value()) {
					optionals.set(0);
				}
				if (struct.isSetVerify_code_to_validate()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetHash_value()) {
					oprot.writeString(struct.hash_value);
				}
				if (struct.isSetVerify_code_to_validate()) {
					oprot.writeString(struct.verify_code_to_validate);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					verify_code_validate_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.hash_value = iprot.readString();
					struct.setHash_valueIsSet(true);
				}
				if (incoming.get(1)) {
					struct.verify_code_to_validate = iprot.readString();
					struct.setVerify_code_to_validateIsSet(true);
				}
			}
		}

	}

	public static class verify_code_validate_result
			implements
			org.apache.thrift.TBase<verify_code_validate_result, verify_code_validate_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<verify_code_validate_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"verify_code_validate_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new verify_code_validate_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new verify_code_validate_resultTupleSchemeFactory());
		}

		public boolean success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					verify_code_validate_result.class, metaDataMap);
		}

		public verify_code_validate_result() {
		}

		public verify_code_validate_result(boolean success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public verify_code_validate_result(verify_code_validate_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public verify_code_validate_result deepCopy() {
			return new verify_code_validate_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public verify_code_validate_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public verify_code_validate_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public verify_code_validate_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public verify_code_validate_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof verify_code_validate_result)
				return this.equals((verify_code_validate_result) that);
			return false;
		}

		public boolean equals(verify_code_validate_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(verify_code_validate_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("verify_code_validate_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class verify_code_validate_resultStandardSchemeFactory
				implements SchemeFactory {
			public verify_code_validate_resultStandardScheme getScheme() {
				return new verify_code_validate_resultStandardScheme();
			}
		}

		private static class verify_code_validate_resultStandardScheme extends
				StandardScheme<verify_code_validate_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					verify_code_validate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					verify_code_validate_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class verify_code_validate_resultTupleSchemeFactory
				implements SchemeFactory {
			public verify_code_validate_resultTupleScheme getScheme() {
				return new verify_code_validate_resultTupleScheme();
			}
		}

		private static class verify_code_validate_resultTupleScheme extends
				TupleScheme<verify_code_validate_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					verify_code_validate_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					verify_code_validate_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class validate_verify_code_with_hash_args
			implements
			org.apache.thrift.TBase<validate_verify_code_with_hash_args, validate_verify_code_with_hash_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<validate_verify_code_with_hash_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"validate_verify_code_with_hash_args");

		private static final org.apache.thrift.protocol.TField SENDER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"sender_key", org.apache.thrift.protocol.TType.STRING,
				(short) 1);
		private static final org.apache.thrift.protocol.TField HASH_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"hash_value", org.apache.thrift.protocol.TType.STRING,
				(short) 2);
		private static final org.apache.thrift.protocol.TField VERIFY_CODE_TO_VALIDATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"verify_code_to_validate",
				org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(
					StandardScheme.class,
					new validate_verify_code_with_hash_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new validate_verify_code_with_hash_argsTupleSchemeFactory());
		}

		public String sender_key; // required
		public String hash_value; // required
		public String verify_code_to_validate; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SENDER_KEY((short) 1, "sender_key"), HASH_VALUE((short) 2,
					"hash_value"), VERIFY_CODE_TO_VALIDATE((short) 3,
					"verify_code_to_validate");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SENDER_KEY
					return SENDER_KEY;
				case 2: // HASH_VALUE
					return HASH_VALUE;
				case 3: // VERIFY_CODE_TO_VALIDATE
					return VERIFY_CODE_TO_VALIDATE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SENDER_KEY,
					new org.apache.thrift.meta_data.FieldMetaData("sender_key",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.HASH_VALUE,
					new org.apache.thrift.meta_data.FieldMetaData("hash_value",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERIFY_CODE_TO_VALIDATE,
					new org.apache.thrift.meta_data.FieldMetaData(
							"verify_code_to_validate",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					validate_verify_code_with_hash_args.class, metaDataMap);
		}

		public validate_verify_code_with_hash_args() {
		}

		public validate_verify_code_with_hash_args(String sender_key,
				String hash_value, String verify_code_to_validate) {
			this();
			this.sender_key = sender_key;
			this.hash_value = hash_value;
			this.verify_code_to_validate = verify_code_to_validate;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public validate_verify_code_with_hash_args(
				validate_verify_code_with_hash_args other) {
			if (other.isSetSender_key()) {
				this.sender_key = other.sender_key;
			}
			if (other.isSetHash_value()) {
				this.hash_value = other.hash_value;
			}
			if (other.isSetVerify_code_to_validate()) {
				this.verify_code_to_validate = other.verify_code_to_validate;
			}
		}

		public validate_verify_code_with_hash_args deepCopy() {
			return new validate_verify_code_with_hash_args(this);
		}

		public void clear() {
			this.sender_key = null;
			this.hash_value = null;
			this.verify_code_to_validate = null;
		}

		public String getSender_key() {
			return this.sender_key;
		}

		public validate_verify_code_with_hash_args setSender_key(
				String sender_key) {
			this.sender_key = sender_key;
			return this;
		}

		public void unsetSender_key() {
			this.sender_key = null;
		}

		/**
		 * Returns true if field sender_key is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetSender_key() {
			return this.sender_key != null;
		}

		public void setSender_keyIsSet(boolean value) {
			if (!value) {
				this.sender_key = null;
			}
		}

		public String getHash_value() {
			return this.hash_value;
		}

		public validate_verify_code_with_hash_args setHash_value(
				String hash_value) {
			this.hash_value = hash_value;
			return this;
		}

		public void unsetHash_value() {
			this.hash_value = null;
		}

		/**
		 * Returns true if field hash_value is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetHash_value() {
			return this.hash_value != null;
		}

		public void setHash_valueIsSet(boolean value) {
			if (!value) {
				this.hash_value = null;
			}
		}

		public String getVerify_code_to_validate() {
			return this.verify_code_to_validate;
		}

		public validate_verify_code_with_hash_args setVerify_code_to_validate(
				String verify_code_to_validate) {
			this.verify_code_to_validate = verify_code_to_validate;
			return this;
		}

		public void unsetVerify_code_to_validate() {
			this.verify_code_to_validate = null;
		}

		/**
		 * Returns true if field verify_code_to_validate is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSetVerify_code_to_validate() {
			return this.verify_code_to_validate != null;
		}

		public void setVerify_code_to_validateIsSet(boolean value) {
			if (!value) {
				this.verify_code_to_validate = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SENDER_KEY:
				if (value == null) {
					unsetSender_key();
				} else {
					setSender_key((String) value);
				}
				break;

			case HASH_VALUE:
				if (value == null) {
					unsetHash_value();
				} else {
					setHash_value((String) value);
				}
				break;

			case VERIFY_CODE_TO_VALIDATE:
				if (value == null) {
					unsetVerify_code_to_validate();
				} else {
					setVerify_code_to_validate((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SENDER_KEY:
				return getSender_key();

			case HASH_VALUE:
				return getHash_value();

			case VERIFY_CODE_TO_VALIDATE:
				return getVerify_code_to_validate();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SENDER_KEY:
				return isSetSender_key();
			case HASH_VALUE:
				return isSetHash_value();
			case VERIFY_CODE_TO_VALIDATE:
				return isSetVerify_code_to_validate();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof validate_verify_code_with_hash_args)
				return this.equals((validate_verify_code_with_hash_args) that);
			return false;
		}

		public boolean equals(validate_verify_code_with_hash_args that) {
			if (that == null)
				return false;

			boolean this_present_sender_key = true && this.isSetSender_key();
			boolean that_present_sender_key = true && that.isSetSender_key();
			if (this_present_sender_key || that_present_sender_key) {
				if (!(this_present_sender_key && that_present_sender_key))
					return false;
				if (!this.sender_key.equals(that.sender_key))
					return false;
			}

			boolean this_present_hash_value = true && this.isSetHash_value();
			boolean that_present_hash_value = true && that.isSetHash_value();
			if (this_present_hash_value || that_present_hash_value) {
				if (!(this_present_hash_value && that_present_hash_value))
					return false;
				if (!this.hash_value.equals(that.hash_value))
					return false;
			}

			boolean this_present_verify_code_to_validate = true && this
					.isSetVerify_code_to_validate();
			boolean that_present_verify_code_to_validate = true && that
					.isSetVerify_code_to_validate();
			if (this_present_verify_code_to_validate
					|| that_present_verify_code_to_validate) {
				if (!(this_present_verify_code_to_validate && that_present_verify_code_to_validate))
					return false;
				if (!this.verify_code_to_validate
						.equals(that.verify_code_to_validate))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_sender_key = true && (isSetSender_key());
			list.add(present_sender_key);
			if (present_sender_key)
				list.add(sender_key);

			boolean present_hash_value = true && (isSetHash_value());
			list.add(present_hash_value);
			if (present_hash_value)
				list.add(hash_value);

			boolean present_verify_code_to_validate = true && (isSetVerify_code_to_validate());
			list.add(present_verify_code_to_validate);
			if (present_verify_code_to_validate)
				list.add(verify_code_to_validate);

			return list.hashCode();
		}

		public int compareTo(validate_verify_code_with_hash_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSender_key()).compareTo(
					other.isSetSender_key());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSender_key()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.sender_key, other.sender_key);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetHash_value()).compareTo(
					other.isSetHash_value());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetHash_value()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.hash_value, other.hash_value);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVerify_code_to_validate())
					.compareTo(other.isSetVerify_code_to_validate());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVerify_code_to_validate()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.verify_code_to_validate,
						other.verify_code_to_validate);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"validate_verify_code_with_hash_args(");
			boolean first = true;

			sb.append("sender_key:");
			if (this.sender_key == null) {
				sb.append("null");
			} else {
				sb.append(this.sender_key);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("hash_value:");
			if (this.hash_value == null) {
				sb.append("null");
			} else {
				sb.append(this.hash_value);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("verify_code_to_validate:");
			if (this.verify_code_to_validate == null) {
				sb.append("null");
			} else {
				sb.append(this.verify_code_to_validate);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class validate_verify_code_with_hash_argsStandardSchemeFactory
				implements SchemeFactory {
			public validate_verify_code_with_hash_argsStandardScheme getScheme() {
				return new validate_verify_code_with_hash_argsStandardScheme();
			}
		}

		private static class validate_verify_code_with_hash_argsStandardScheme
				extends StandardScheme<validate_verify_code_with_hash_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					validate_verify_code_with_hash_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SENDER_KEY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.sender_key = iprot.readString();
							struct.setSender_keyIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // HASH_VALUE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.hash_value = iprot.readString();
							struct.setHash_valueIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // VERIFY_CODE_TO_VALIDATE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.verify_code_to_validate = iprot.readString();
							struct.setVerify_code_to_validateIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					validate_verify_code_with_hash_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.sender_key != null) {
					oprot.writeFieldBegin(SENDER_KEY_FIELD_DESC);
					oprot.writeString(struct.sender_key);
					oprot.writeFieldEnd();
				}
				if (struct.hash_value != null) {
					oprot.writeFieldBegin(HASH_VALUE_FIELD_DESC);
					oprot.writeString(struct.hash_value);
					oprot.writeFieldEnd();
				}
				if (struct.verify_code_to_validate != null) {
					oprot.writeFieldBegin(VERIFY_CODE_TO_VALIDATE_FIELD_DESC);
					oprot.writeString(struct.verify_code_to_validate);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class validate_verify_code_with_hash_argsTupleSchemeFactory
				implements SchemeFactory {
			public validate_verify_code_with_hash_argsTupleScheme getScheme() {
				return new validate_verify_code_with_hash_argsTupleScheme();
			}
		}

		private static class validate_verify_code_with_hash_argsTupleScheme
				extends TupleScheme<validate_verify_code_with_hash_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					validate_verify_code_with_hash_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSender_key()) {
					optionals.set(0);
				}
				if (struct.isSetHash_value()) {
					optionals.set(1);
				}
				if (struct.isSetVerify_code_to_validate()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetSender_key()) {
					oprot.writeString(struct.sender_key);
				}
				if (struct.isSetHash_value()) {
					oprot.writeString(struct.hash_value);
				}
				if (struct.isSetVerify_code_to_validate()) {
					oprot.writeString(struct.verify_code_to_validate);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					validate_verify_code_with_hash_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.sender_key = iprot.readString();
					struct.setSender_keyIsSet(true);
				}
				if (incoming.get(1)) {
					struct.hash_value = iprot.readString();
					struct.setHash_valueIsSet(true);
				}
				if (incoming.get(2)) {
					struct.verify_code_to_validate = iprot.readString();
					struct.setVerify_code_to_validateIsSet(true);
				}
			}
		}

	}

	public static class validate_verify_code_with_hash_result
			implements
			org.apache.thrift.TBase<validate_verify_code_with_hash_result, validate_verify_code_with_hash_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<validate_verify_code_with_hash_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"validate_verify_code_with_hash_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(
					StandardScheme.class,
					new validate_verify_code_with_hash_resultStandardSchemeFactory());
			schemes.put(
					TupleScheme.class,
					new validate_verify_code_with_hash_resultTupleSchemeFactory());
		}

		public boolean success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					validate_verify_code_with_hash_result.class, metaDataMap);
		}

		public validate_verify_code_with_hash_result() {
		}

		public validate_verify_code_with_hash_result(boolean success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public validate_verify_code_with_hash_result(
				validate_verify_code_with_hash_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public validate_verify_code_with_hash_result deepCopy() {
			return new validate_verify_code_with_hash_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public validate_verify_code_with_hash_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public validate_verify_code_with_hash_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public validate_verify_code_with_hash_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public validate_verify_code_with_hash_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof validate_verify_code_with_hash_result)
				return this
						.equals((validate_verify_code_with_hash_result) that);
			return false;
		}

		public boolean equals(validate_verify_code_with_hash_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(validate_verify_code_with_hash_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"validate_verify_code_with_hash_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class validate_verify_code_with_hash_resultStandardSchemeFactory
				implements SchemeFactory {
			public validate_verify_code_with_hash_resultStandardScheme getScheme() {
				return new validate_verify_code_with_hash_resultStandardScheme();
			}
		}

		private static class validate_verify_code_with_hash_resultStandardScheme
				extends StandardScheme<validate_verify_code_with_hash_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					validate_verify_code_with_hash_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					validate_verify_code_with_hash_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class validate_verify_code_with_hash_resultTupleSchemeFactory
				implements SchemeFactory {
			public validate_verify_code_with_hash_resultTupleScheme getScheme() {
				return new validate_verify_code_with_hash_resultTupleScheme();
			}
		}

		private static class validate_verify_code_with_hash_resultTupleScheme
				extends TupleScheme<validate_verify_code_with_hash_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					validate_verify_code_with_hash_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					validate_verify_code_with_hash_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class validate_verify_code_with_receiver_args
			implements
			org.apache.thrift.TBase<validate_verify_code_with_receiver_args, validate_verify_code_with_receiver_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<validate_verify_code_with_receiver_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"validate_verify_code_with_receiver_args");

		private static final org.apache.thrift.protocol.TField SENDER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"sender_key", org.apache.thrift.protocol.TType.STRING,
				(short) 1);
		private static final org.apache.thrift.protocol.TField RECEIVER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"receiver", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField VERIFY_CODE_TO_VALIDATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"verify_code_to_validate",
				org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(
					StandardScheme.class,
					new validate_verify_code_with_receiver_argsStandardSchemeFactory());
			schemes.put(
					TupleScheme.class,
					new validate_verify_code_with_receiver_argsTupleSchemeFactory());
		}

		public String sender_key; // required
		public String receiver; // required
		public String verify_code_to_validate; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SENDER_KEY((short) 1, "sender_key"), RECEIVER((short) 2, "receiver"), VERIFY_CODE_TO_VALIDATE(
					(short) 3, "verify_code_to_validate");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SENDER_KEY
					return SENDER_KEY;
				case 2: // RECEIVER
					return RECEIVER;
				case 3: // VERIFY_CODE_TO_VALIDATE
					return VERIFY_CODE_TO_VALIDATE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SENDER_KEY,
					new org.apache.thrift.meta_data.FieldMetaData("sender_key",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.RECEIVER,
					new org.apache.thrift.meta_data.FieldMetaData("receiver",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.VERIFY_CODE_TO_VALIDATE,
					new org.apache.thrift.meta_data.FieldMetaData(
							"verify_code_to_validate",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					validate_verify_code_with_receiver_args.class, metaDataMap);
		}

		public validate_verify_code_with_receiver_args() {
		}

		public validate_verify_code_with_receiver_args(String sender_key,
				String receiver, String verify_code_to_validate) {
			this();
			this.sender_key = sender_key;
			this.receiver = receiver;
			this.verify_code_to_validate = verify_code_to_validate;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public validate_verify_code_with_receiver_args(
				validate_verify_code_with_receiver_args other) {
			if (other.isSetSender_key()) {
				this.sender_key = other.sender_key;
			}
			if (other.isSetReceiver()) {
				this.receiver = other.receiver;
			}
			if (other.isSetVerify_code_to_validate()) {
				this.verify_code_to_validate = other.verify_code_to_validate;
			}
		}

		public validate_verify_code_with_receiver_args deepCopy() {
			return new validate_verify_code_with_receiver_args(this);
		}

		public void clear() {
			this.sender_key = null;
			this.receiver = null;
			this.verify_code_to_validate = null;
		}

		public String getSender_key() {
			return this.sender_key;
		}

		public validate_verify_code_with_receiver_args setSender_key(
				String sender_key) {
			this.sender_key = sender_key;
			return this;
		}

		public void unsetSender_key() {
			this.sender_key = null;
		}

		/**
		 * Returns true if field sender_key is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetSender_key() {
			return this.sender_key != null;
		}

		public void setSender_keyIsSet(boolean value) {
			if (!value) {
				this.sender_key = null;
			}
		}

		public String getReceiver() {
			return this.receiver;
		}

		public validate_verify_code_with_receiver_args setReceiver(
				String receiver) {
			this.receiver = receiver;
			return this;
		}

		public void unsetReceiver() {
			this.receiver = null;
		}

		/**
		 * Returns true if field receiver is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetReceiver() {
			return this.receiver != null;
		}

		public void setReceiverIsSet(boolean value) {
			if (!value) {
				this.receiver = null;
			}
		}

		public String getVerify_code_to_validate() {
			return this.verify_code_to_validate;
		}

		public validate_verify_code_with_receiver_args setVerify_code_to_validate(
				String verify_code_to_validate) {
			this.verify_code_to_validate = verify_code_to_validate;
			return this;
		}

		public void unsetVerify_code_to_validate() {
			this.verify_code_to_validate = null;
		}

		/**
		 * Returns true if field verify_code_to_validate is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSetVerify_code_to_validate() {
			return this.verify_code_to_validate != null;
		}

		public void setVerify_code_to_validateIsSet(boolean value) {
			if (!value) {
				this.verify_code_to_validate = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SENDER_KEY:
				if (value == null) {
					unsetSender_key();
				} else {
					setSender_key((String) value);
				}
				break;

			case RECEIVER:
				if (value == null) {
					unsetReceiver();
				} else {
					setReceiver((String) value);
				}
				break;

			case VERIFY_CODE_TO_VALIDATE:
				if (value == null) {
					unsetVerify_code_to_validate();
				} else {
					setVerify_code_to_validate((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SENDER_KEY:
				return getSender_key();

			case RECEIVER:
				return getReceiver();

			case VERIFY_CODE_TO_VALIDATE:
				return getVerify_code_to_validate();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SENDER_KEY:
				return isSetSender_key();
			case RECEIVER:
				return isSetReceiver();
			case VERIFY_CODE_TO_VALIDATE:
				return isSetVerify_code_to_validate();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof validate_verify_code_with_receiver_args)
				return this
						.equals((validate_verify_code_with_receiver_args) that);
			return false;
		}

		public boolean equals(validate_verify_code_with_receiver_args that) {
			if (that == null)
				return false;

			boolean this_present_sender_key = true && this.isSetSender_key();
			boolean that_present_sender_key = true && that.isSetSender_key();
			if (this_present_sender_key || that_present_sender_key) {
				if (!(this_present_sender_key && that_present_sender_key))
					return false;
				if (!this.sender_key.equals(that.sender_key))
					return false;
			}

			boolean this_present_receiver = true && this.isSetReceiver();
			boolean that_present_receiver = true && that.isSetReceiver();
			if (this_present_receiver || that_present_receiver) {
				if (!(this_present_receiver && that_present_receiver))
					return false;
				if (!this.receiver.equals(that.receiver))
					return false;
			}

			boolean this_present_verify_code_to_validate = true && this
					.isSetVerify_code_to_validate();
			boolean that_present_verify_code_to_validate = true && that
					.isSetVerify_code_to_validate();
			if (this_present_verify_code_to_validate
					|| that_present_verify_code_to_validate) {
				if (!(this_present_verify_code_to_validate && that_present_verify_code_to_validate))
					return false;
				if (!this.verify_code_to_validate
						.equals(that.verify_code_to_validate))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_sender_key = true && (isSetSender_key());
			list.add(present_sender_key);
			if (present_sender_key)
				list.add(sender_key);

			boolean present_receiver = true && (isSetReceiver());
			list.add(present_receiver);
			if (present_receiver)
				list.add(receiver);

			boolean present_verify_code_to_validate = true && (isSetVerify_code_to_validate());
			list.add(present_verify_code_to_validate);
			if (present_verify_code_to_validate)
				list.add(verify_code_to_validate);

			return list.hashCode();
		}

		public int compareTo(validate_verify_code_with_receiver_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSender_key()).compareTo(
					other.isSetSender_key());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSender_key()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.sender_key, other.sender_key);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetReceiver()).compareTo(
					other.isSetReceiver());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetReceiver()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.receiver, other.receiver);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetVerify_code_to_validate())
					.compareTo(other.isSetVerify_code_to_validate());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetVerify_code_to_validate()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.verify_code_to_validate,
						other.verify_code_to_validate);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"validate_verify_code_with_receiver_args(");
			boolean first = true;

			sb.append("sender_key:");
			if (this.sender_key == null) {
				sb.append("null");
			} else {
				sb.append(this.sender_key);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("receiver:");
			if (this.receiver == null) {
				sb.append("null");
			} else {
				sb.append(this.receiver);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("verify_code_to_validate:");
			if (this.verify_code_to_validate == null) {
				sb.append("null");
			} else {
				sb.append(this.verify_code_to_validate);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class validate_verify_code_with_receiver_argsStandardSchemeFactory
				implements SchemeFactory {
			public validate_verify_code_with_receiver_argsStandardScheme getScheme() {
				return new validate_verify_code_with_receiver_argsStandardScheme();
			}
		}

		private static class validate_verify_code_with_receiver_argsStandardScheme
				extends StandardScheme<validate_verify_code_with_receiver_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					validate_verify_code_with_receiver_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SENDER_KEY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.sender_key = iprot.readString();
							struct.setSender_keyIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // RECEIVER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.receiver = iprot.readString();
							struct.setReceiverIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // VERIFY_CODE_TO_VALIDATE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.verify_code_to_validate = iprot.readString();
							struct.setVerify_code_to_validateIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					validate_verify_code_with_receiver_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.sender_key != null) {
					oprot.writeFieldBegin(SENDER_KEY_FIELD_DESC);
					oprot.writeString(struct.sender_key);
					oprot.writeFieldEnd();
				}
				if (struct.receiver != null) {
					oprot.writeFieldBegin(RECEIVER_FIELD_DESC);
					oprot.writeString(struct.receiver);
					oprot.writeFieldEnd();
				}
				if (struct.verify_code_to_validate != null) {
					oprot.writeFieldBegin(VERIFY_CODE_TO_VALIDATE_FIELD_DESC);
					oprot.writeString(struct.verify_code_to_validate);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class validate_verify_code_with_receiver_argsTupleSchemeFactory
				implements SchemeFactory {
			public validate_verify_code_with_receiver_argsTupleScheme getScheme() {
				return new validate_verify_code_with_receiver_argsTupleScheme();
			}
		}

		private static class validate_verify_code_with_receiver_argsTupleScheme
				extends TupleScheme<validate_verify_code_with_receiver_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					validate_verify_code_with_receiver_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSender_key()) {
					optionals.set(0);
				}
				if (struct.isSetReceiver()) {
					optionals.set(1);
				}
				if (struct.isSetVerify_code_to_validate()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetSender_key()) {
					oprot.writeString(struct.sender_key);
				}
				if (struct.isSetReceiver()) {
					oprot.writeString(struct.receiver);
				}
				if (struct.isSetVerify_code_to_validate()) {
					oprot.writeString(struct.verify_code_to_validate);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					validate_verify_code_with_receiver_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.sender_key = iprot.readString();
					struct.setSender_keyIsSet(true);
				}
				if (incoming.get(1)) {
					struct.receiver = iprot.readString();
					struct.setReceiverIsSet(true);
				}
				if (incoming.get(2)) {
					struct.verify_code_to_validate = iprot.readString();
					struct.setVerify_code_to_validateIsSet(true);
				}
			}
		}

	}

	public static class validate_verify_code_with_receiver_result
			implements
			org.apache.thrift.TBase<validate_verify_code_with_receiver_result, validate_verify_code_with_receiver_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<validate_verify_code_with_receiver_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"validate_verify_code_with_receiver_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(
					StandardScheme.class,
					new validate_verify_code_with_receiver_resultStandardSchemeFactory());
			schemes.put(
					TupleScheme.class,
					new validate_verify_code_with_receiver_resultTupleSchemeFactory());
		}

		public boolean success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					validate_verify_code_with_receiver_result.class,
					metaDataMap);
		}

		public validate_verify_code_with_receiver_result() {
		}

		public validate_verify_code_with_receiver_result(boolean success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public validate_verify_code_with_receiver_result(
				validate_verify_code_with_receiver_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public validate_verify_code_with_receiver_result deepCopy() {
			return new validate_verify_code_with_receiver_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public validate_verify_code_with_receiver_result setSuccess(
				boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public validate_verify_code_with_receiver_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public validate_verify_code_with_receiver_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public validate_verify_code_with_receiver_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof validate_verify_code_with_receiver_result)
				return this
						.equals((validate_verify_code_with_receiver_result) that);
			return false;
		}

		public boolean equals(validate_verify_code_with_receiver_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(validate_verify_code_with_receiver_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"validate_verify_code_with_receiver_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class validate_verify_code_with_receiver_resultStandardSchemeFactory
				implements SchemeFactory {
			public validate_verify_code_with_receiver_resultStandardScheme getScheme() {
				return new validate_verify_code_with_receiver_resultStandardScheme();
			}
		}

		private static class validate_verify_code_with_receiver_resultStandardScheme
				extends
				StandardScheme<validate_verify_code_with_receiver_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					validate_verify_code_with_receiver_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					validate_verify_code_with_receiver_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class validate_verify_code_with_receiver_resultTupleSchemeFactory
				implements SchemeFactory {
			public validate_verify_code_with_receiver_resultTupleScheme getScheme() {
				return new validate_verify_code_with_receiver_resultTupleScheme();
			}
		}

		private static class validate_verify_code_with_receiver_resultTupleScheme
				extends TupleScheme<validate_verify_code_with_receiver_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					validate_verify_code_with_receiver_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					validate_verify_code_with_receiver_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class validated_within_n_minutes_args
			implements
			org.apache.thrift.TBase<validated_within_n_minutes_args, validated_within_n_minutes_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<validated_within_n_minutes_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"validated_within_n_minutes_args");

		private static final org.apache.thrift.protocol.TField SENDER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"sender_key", org.apache.thrift.protocol.TType.STRING,
				(short) 1);
		private static final org.apache.thrift.protocol.TField RECEIVER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"receiver", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField MINUTES_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"minutes", org.apache.thrift.protocol.TType.I64, (short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new validated_within_n_minutes_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new validated_within_n_minutes_argsTupleSchemeFactory());
		}

		public String sender_key; // required
		public String receiver; // required
		public long minutes; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SENDER_KEY((short) 1, "sender_key"), RECEIVER((short) 2, "receiver"), MINUTES(
					(short) 3, "minutes");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SENDER_KEY
					return SENDER_KEY;
				case 2: // RECEIVER
					return RECEIVER;
				case 3: // MINUTES
					return MINUTES;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __MINUTES_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SENDER_KEY,
					new org.apache.thrift.meta_data.FieldMetaData("sender_key",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.RECEIVER,
					new org.apache.thrift.meta_data.FieldMetaData("receiver",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.MINUTES,
					new org.apache.thrift.meta_data.FieldMetaData("minutes",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I64)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					validated_within_n_minutes_args.class, metaDataMap);
		}

		public validated_within_n_minutes_args() {
		}

		public validated_within_n_minutes_args(String sender_key,
				String receiver, long minutes) {
			this();
			this.sender_key = sender_key;
			this.receiver = receiver;
			this.minutes = minutes;
			setMinutesIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public validated_within_n_minutes_args(
				validated_within_n_minutes_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetSender_key()) {
				this.sender_key = other.sender_key;
			}
			if (other.isSetReceiver()) {
				this.receiver = other.receiver;
			}
			this.minutes = other.minutes;
		}

		public validated_within_n_minutes_args deepCopy() {
			return new validated_within_n_minutes_args(this);
		}

		public void clear() {
			this.sender_key = null;
			this.receiver = null;
			setMinutesIsSet(false);
			this.minutes = 0;
		}

		public String getSender_key() {
			return this.sender_key;
		}

		public validated_within_n_minutes_args setSender_key(String sender_key) {
			this.sender_key = sender_key;
			return this;
		}

		public void unsetSender_key() {
			this.sender_key = null;
		}

		/**
		 * Returns true if field sender_key is set (has been assigned a value)
		 * and false otherwise
		 */
		public boolean isSetSender_key() {
			return this.sender_key != null;
		}

		public void setSender_keyIsSet(boolean value) {
			if (!value) {
				this.sender_key = null;
			}
		}

		public String getReceiver() {
			return this.receiver;
		}

		public validated_within_n_minutes_args setReceiver(String receiver) {
			this.receiver = receiver;
			return this;
		}

		public void unsetReceiver() {
			this.receiver = null;
		}

		/**
		 * Returns true if field receiver is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetReceiver() {
			return this.receiver != null;
		}

		public void setReceiverIsSet(boolean value) {
			if (!value) {
				this.receiver = null;
			}
		}

		public long getMinutes() {
			return this.minutes;
		}

		public validated_within_n_minutes_args setMinutes(long minutes) {
			this.minutes = minutes;
			setMinutesIsSet(true);
			return this;
		}

		public void unsetMinutes() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__MINUTES_ISSET_ID);
		}

		/**
		 * Returns true if field minutes is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetMinutes() {
			return EncodingUtils.testBit(__isset_bitfield, __MINUTES_ISSET_ID);
		}

		public void setMinutesIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__MINUTES_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SENDER_KEY:
				if (value == null) {
					unsetSender_key();
				} else {
					setSender_key((String) value);
				}
				break;

			case RECEIVER:
				if (value == null) {
					unsetReceiver();
				} else {
					setReceiver((String) value);
				}
				break;

			case MINUTES:
				if (value == null) {
					unsetMinutes();
				} else {
					setMinutes((Long) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SENDER_KEY:
				return getSender_key();

			case RECEIVER:
				return getReceiver();

			case MINUTES:
				return Long.valueOf(getMinutes());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SENDER_KEY:
				return isSetSender_key();
			case RECEIVER:
				return isSetReceiver();
			case MINUTES:
				return isSetMinutes();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof validated_within_n_minutes_args)
				return this.equals((validated_within_n_minutes_args) that);
			return false;
		}

		public boolean equals(validated_within_n_minutes_args that) {
			if (that == null)
				return false;

			boolean this_present_sender_key = true && this.isSetSender_key();
			boolean that_present_sender_key = true && that.isSetSender_key();
			if (this_present_sender_key || that_present_sender_key) {
				if (!(this_present_sender_key && that_present_sender_key))
					return false;
				if (!this.sender_key.equals(that.sender_key))
					return false;
			}

			boolean this_present_receiver = true && this.isSetReceiver();
			boolean that_present_receiver = true && that.isSetReceiver();
			if (this_present_receiver || that_present_receiver) {
				if (!(this_present_receiver && that_present_receiver))
					return false;
				if (!this.receiver.equals(that.receiver))
					return false;
			}

			boolean this_present_minutes = true;
			boolean that_present_minutes = true;
			if (this_present_minutes || that_present_minutes) {
				if (!(this_present_minutes && that_present_minutes))
					return false;
				if (this.minutes != that.minutes)
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_sender_key = true && (isSetSender_key());
			list.add(present_sender_key);
			if (present_sender_key)
				list.add(sender_key);

			boolean present_receiver = true && (isSetReceiver());
			list.add(present_receiver);
			if (present_receiver)
				list.add(receiver);

			boolean present_minutes = true;
			list.add(present_minutes);
			if (present_minutes)
				list.add(minutes);

			return list.hashCode();
		}

		public int compareTo(validated_within_n_minutes_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSender_key()).compareTo(
					other.isSetSender_key());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSender_key()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.sender_key, other.sender_key);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetReceiver()).compareTo(
					other.isSetReceiver());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetReceiver()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.receiver, other.receiver);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetMinutes()).compareTo(
					other.isSetMinutes());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMinutes()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.minutes, other.minutes);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"validated_within_n_minutes_args(");
			boolean first = true;

			sb.append("sender_key:");
			if (this.sender_key == null) {
				sb.append("null");
			} else {
				sb.append(this.sender_key);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("receiver:");
			if (this.receiver == null) {
				sb.append("null");
			} else {
				sb.append(this.receiver);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("minutes:");
			sb.append(this.minutes);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class validated_within_n_minutes_argsStandardSchemeFactory
				implements SchemeFactory {
			public validated_within_n_minutes_argsStandardScheme getScheme() {
				return new validated_within_n_minutes_argsStandardScheme();
			}
		}

		private static class validated_within_n_minutes_argsStandardScheme
				extends StandardScheme<validated_within_n_minutes_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					validated_within_n_minutes_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SENDER_KEY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.sender_key = iprot.readString();
							struct.setSender_keyIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // RECEIVER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.receiver = iprot.readString();
							struct.setReceiverIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // MINUTES
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.minutes = iprot.readI64();
							struct.setMinutesIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					validated_within_n_minutes_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.sender_key != null) {
					oprot.writeFieldBegin(SENDER_KEY_FIELD_DESC);
					oprot.writeString(struct.sender_key);
					oprot.writeFieldEnd();
				}
				if (struct.receiver != null) {
					oprot.writeFieldBegin(RECEIVER_FIELD_DESC);
					oprot.writeString(struct.receiver);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(MINUTES_FIELD_DESC);
				oprot.writeI64(struct.minutes);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class validated_within_n_minutes_argsTupleSchemeFactory
				implements SchemeFactory {
			public validated_within_n_minutes_argsTupleScheme getScheme() {
				return new validated_within_n_minutes_argsTupleScheme();
			}
		}

		private static class validated_within_n_minutes_argsTupleScheme extends
				TupleScheme<validated_within_n_minutes_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					validated_within_n_minutes_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSender_key()) {
					optionals.set(0);
				}
				if (struct.isSetReceiver()) {
					optionals.set(1);
				}
				if (struct.isSetMinutes()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetSender_key()) {
					oprot.writeString(struct.sender_key);
				}
				if (struct.isSetReceiver()) {
					oprot.writeString(struct.receiver);
				}
				if (struct.isSetMinutes()) {
					oprot.writeI64(struct.minutes);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					validated_within_n_minutes_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.sender_key = iprot.readString();
					struct.setSender_keyIsSet(true);
				}
				if (incoming.get(1)) {
					struct.receiver = iprot.readString();
					struct.setReceiverIsSet(true);
				}
				if (incoming.get(2)) {
					struct.minutes = iprot.readI64();
					struct.setMinutesIsSet(true);
				}
			}
		}

	}

	public static class validated_within_n_minutes_result
			implements
			org.apache.thrift.TBase<validated_within_n_minutes_result, validated_within_n_minutes_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<validated_within_n_minutes_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"validated_within_n_minutes_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(
					StandardScheme.class,
					new validated_within_n_minutes_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new validated_within_n_minutes_resultTupleSchemeFactory());
		}

		public boolean success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					validated_within_n_minutes_result.class, metaDataMap);
		}

		public validated_within_n_minutes_result() {
		}

		public validated_within_n_minutes_result(boolean success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public validated_within_n_minutes_result(
				validated_within_n_minutes_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public validated_within_n_minutes_result deepCopy() {
			return new validated_within_n_minutes_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public validated_within_n_minutes_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public validated_within_n_minutes_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public validated_within_n_minutes_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public validated_within_n_minutes_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof validated_within_n_minutes_result)
				return this.equals((validated_within_n_minutes_result) that);
			return false;
		}

		public boolean equals(validated_within_n_minutes_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(validated_within_n_minutes_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"validated_within_n_minutes_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class validated_within_n_minutes_resultStandardSchemeFactory
				implements SchemeFactory {
			public validated_within_n_minutes_resultStandardScheme getScheme() {
				return new validated_within_n_minutes_resultStandardScheme();
			}
		}

		private static class validated_within_n_minutes_resultStandardScheme
				extends StandardScheme<validated_within_n_minutes_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					validated_within_n_minutes_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					validated_within_n_minutes_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class validated_within_n_minutes_resultTupleSchemeFactory
				implements SchemeFactory {
			public validated_within_n_minutes_resultTupleScheme getScheme() {
				return new validated_within_n_minutes_resultTupleScheme();
			}
		}

		private static class validated_within_n_minutes_resultTupleScheme
				extends TupleScheme<validated_within_n_minutes_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					validated_within_n_minutes_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					validated_within_n_minutes_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class query_sent_verify_code_args
			implements
			org.apache.thrift.TBase<query_sent_verify_code_args, query_sent_verify_code_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<query_sent_verify_code_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"query_sent_verify_code_args");

		private static final org.apache.thrift.protocol.TField RECEIVER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"receiver", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"limit", org.apache.thrift.protocol.TType.I16, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new query_sent_verify_code_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new query_sent_verify_code_argsTupleSchemeFactory());
		}

		public String receiver; // required
		public short limit; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			RECEIVER((short) 1, "receiver"), LIMIT((short) 2, "limit");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // RECEIVER
					return RECEIVER;
				case 2: // LIMIT
					return LIMIT;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LIMIT_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.RECEIVER,
					new org.apache.thrift.meta_data.FieldMetaData("receiver",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.LIMIT,
					new org.apache.thrift.meta_data.FieldMetaData("limit",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I16)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					query_sent_verify_code_args.class, metaDataMap);
		}

		public query_sent_verify_code_args() {
		}

		public query_sent_verify_code_args(String receiver, short limit) {
			this();
			this.receiver = receiver;
			this.limit = limit;
			setLimitIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public query_sent_verify_code_args(query_sent_verify_code_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetReceiver()) {
				this.receiver = other.receiver;
			}
			this.limit = other.limit;
		}

		public query_sent_verify_code_args deepCopy() {
			return new query_sent_verify_code_args(this);
		}

		public void clear() {
			this.receiver = null;
			setLimitIsSet(false);
			this.limit = 0;
		}

		public String getReceiver() {
			return this.receiver;
		}

		public query_sent_verify_code_args setReceiver(String receiver) {
			this.receiver = receiver;
			return this;
		}

		public void unsetReceiver() {
			this.receiver = null;
		}

		/**
		 * Returns true if field receiver is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetReceiver() {
			return this.receiver != null;
		}

		public void setReceiverIsSet(boolean value) {
			if (!value) {
				this.receiver = null;
			}
		}

		public short getLimit() {
			return this.limit;
		}

		public query_sent_verify_code_args setLimit(short limit) {
			this.limit = limit;
			setLimitIsSet(true);
			return this;
		}

		public void unsetLimit() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__LIMIT_ISSET_ID);
		}

		/**
		 * Returns true if field limit is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetLimit() {
			return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
		}

		public void setLimitIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__LIMIT_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case RECEIVER:
				if (value == null) {
					unsetReceiver();
				} else {
					setReceiver((String) value);
				}
				break;

			case LIMIT:
				if (value == null) {
					unsetLimit();
				} else {
					setLimit((Short) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case RECEIVER:
				return getReceiver();

			case LIMIT:
				return Short.valueOf(getLimit());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case RECEIVER:
				return isSetReceiver();
			case LIMIT:
				return isSetLimit();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof query_sent_verify_code_args)
				return this.equals((query_sent_verify_code_args) that);
			return false;
		}

		public boolean equals(query_sent_verify_code_args that) {
			if (that == null)
				return false;

			boolean this_present_receiver = true && this.isSetReceiver();
			boolean that_present_receiver = true && that.isSetReceiver();
			if (this_present_receiver || that_present_receiver) {
				if (!(this_present_receiver && that_present_receiver))
					return false;
				if (!this.receiver.equals(that.receiver))
					return false;
			}

			boolean this_present_limit = true;
			boolean that_present_limit = true;
			if (this_present_limit || that_present_limit) {
				if (!(this_present_limit && that_present_limit))
					return false;
				if (this.limit != that.limit)
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_receiver = true && (isSetReceiver());
			list.add(present_receiver);
			if (present_receiver)
				list.add(receiver);

			boolean present_limit = true;
			list.add(present_limit);
			if (present_limit)
				list.add(limit);

			return list.hashCode();
		}

		public int compareTo(query_sent_verify_code_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetReceiver()).compareTo(
					other.isSetReceiver());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetReceiver()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.receiver, other.receiver);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetLimit()).compareTo(
					other.isSetLimit());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLimit()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.limit, other.limit);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("query_sent_verify_code_args(");
			boolean first = true;

			sb.append("receiver:");
			if (this.receiver == null) {
				sb.append("null");
			} else {
				sb.append(this.receiver);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("limit:");
			sb.append(this.limit);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class query_sent_verify_code_argsStandardSchemeFactory
				implements SchemeFactory {
			public query_sent_verify_code_argsStandardScheme getScheme() {
				return new query_sent_verify_code_argsStandardScheme();
			}
		}

		private static class query_sent_verify_code_argsStandardScheme extends
				StandardScheme<query_sent_verify_code_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					query_sent_verify_code_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // RECEIVER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.receiver = iprot.readString();
							struct.setReceiverIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // LIMIT
						if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
							struct.limit = iprot.readI16();
							struct.setLimitIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					query_sent_verify_code_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.receiver != null) {
					oprot.writeFieldBegin(RECEIVER_FIELD_DESC);
					oprot.writeString(struct.receiver);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(LIMIT_FIELD_DESC);
				oprot.writeI16(struct.limit);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class query_sent_verify_code_argsTupleSchemeFactory
				implements SchemeFactory {
			public query_sent_verify_code_argsTupleScheme getScheme() {
				return new query_sent_verify_code_argsTupleScheme();
			}
		}

		private static class query_sent_verify_code_argsTupleScheme extends
				TupleScheme<query_sent_verify_code_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					query_sent_verify_code_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetReceiver()) {
					optionals.set(0);
				}
				if (struct.isSetLimit()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetReceiver()) {
					oprot.writeString(struct.receiver);
				}
				if (struct.isSetLimit()) {
					oprot.writeI16(struct.limit);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					query_sent_verify_code_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.receiver = iprot.readString();
					struct.setReceiverIsSet(true);
				}
				if (incoming.get(1)) {
					struct.limit = iprot.readI16();
					struct.setLimitIsSet(true);
				}
			}
		}

	}

	public static class query_sent_verify_code_result
			implements
			org.apache.thrift.TBase<query_sent_verify_code_result, query_sent_verify_code_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<query_sent_verify_code_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"query_sent_verify_code_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new query_sent_verify_code_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new query_sent_verify_code_resultTupleSchemeFactory());
		}

		public List<THermesVerifyCodeQueryResult> success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(
									org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.StructMetaData(
											org.apache.thrift.protocol.TType.STRUCT,
											THermesVerifyCodeQueryResult.class))));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					query_sent_verify_code_result.class, metaDataMap);
		}

		public query_sent_verify_code_result() {
		}

		public query_sent_verify_code_result(
				List<THermesVerifyCodeQueryResult> success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public query_sent_verify_code_result(query_sent_verify_code_result other) {
			if (other.isSetSuccess()) {
				List<THermesVerifyCodeQueryResult> __this__success = new ArrayList<THermesVerifyCodeQueryResult>(
						other.success.size());
				for (THermesVerifyCodeQueryResult other_element : other.success) {
					__this__success.add(new THermesVerifyCodeQueryResult(
							other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public query_sent_verify_code_result deepCopy() {
			return new query_sent_verify_code_result(this);
		}

		public void clear() {
			this.success = null;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<THermesVerifyCodeQueryResult> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(THermesVerifyCodeQueryResult elem) {
			if (this.success == null) {
				this.success = new ArrayList<THermesVerifyCodeQueryResult>();
			}
			this.success.add(elem);
		}

		public List<THermesVerifyCodeQueryResult> getSuccess() {
			return this.success;
		}

		public query_sent_verify_code_result setSuccess(
				List<THermesVerifyCodeQueryResult> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public query_sent_verify_code_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public query_sent_verify_code_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public query_sent_verify_code_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<THermesVerifyCodeQueryResult>) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof query_sent_verify_code_result)
				return this.equals((query_sent_verify_code_result) that);
			return false;
		}

		public boolean equals(query_sent_verify_code_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(query_sent_verify_code_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"query_sent_verify_code_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class query_sent_verify_code_resultStandardSchemeFactory
				implements SchemeFactory {
			public query_sent_verify_code_resultStandardScheme getScheme() {
				return new query_sent_verify_code_resultStandardScheme();
			}
		}

		private static class query_sent_verify_code_resultStandardScheme extends
				StandardScheme<query_sent_verify_code_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					query_sent_verify_code_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list26 = iprot
										.readListBegin();
								struct.success = new ArrayList<THermesVerifyCodeQueryResult>(
										_list26.size);
								THermesVerifyCodeQueryResult _elem27;
								for (int _i28 = 0; _i28 < _list26.size; ++_i28) {
									_elem27 = new THermesVerifyCodeQueryResult();
									_elem27.read(iprot);
									struct.success.add(_elem27);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					query_sent_verify_code_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT,
								struct.success.size()));
						for (THermesVerifyCodeQueryResult _iter29 : struct.success) {
							_iter29.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class query_sent_verify_code_resultTupleSchemeFactory
				implements SchemeFactory {
			public query_sent_verify_code_resultTupleScheme getScheme() {
				return new query_sent_verify_code_resultTupleScheme();
			}
		}

		private static class query_sent_verify_code_resultTupleScheme extends
				TupleScheme<query_sent_verify_code_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					query_sent_verify_code_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (THermesVerifyCodeQueryResult _iter30 : struct.success) {
							_iter30.write(oprot);
						}
					}
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					query_sent_verify_code_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT,
								iprot.readI32());
						struct.success = new ArrayList<THermesVerifyCodeQueryResult>(
								_list31.size);
						THermesVerifyCodeQueryResult _elem32;
						for (int _i33 = 0; _i33 < _list31.size; ++_i33) {
							_elem32 = new THermesVerifyCodeQueryResult();
							_elem32.read(iprot);
							struct.success.add(_elem32);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class query_sms_task_args
			implements
			org.apache.thrift.TBase<query_sms_task_args, query_sms_task_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<query_sms_task_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"query_sms_task_args");

		private static final org.apache.thrift.protocol.TField RECEIVER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"receiver", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"limit", org.apache.thrift.protocol.TType.I16, (short) 2);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new query_sms_task_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new query_sms_task_argsTupleSchemeFactory());
		}

		public String receiver; // required
		public short limit; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			RECEIVER((short) 1, "receiver"), LIMIT((short) 2, "limit");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // RECEIVER
					return RECEIVER;
				case 2: // LIMIT
					return LIMIT;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __LIMIT_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.RECEIVER,
					new org.apache.thrift.meta_data.FieldMetaData("receiver",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.LIMIT,
					new org.apache.thrift.meta_data.FieldMetaData("limit",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I16)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					query_sms_task_args.class, metaDataMap);
		}

		public query_sms_task_args() {
		}

		public query_sms_task_args(String receiver, short limit) {
			this();
			this.receiver = receiver;
			this.limit = limit;
			setLimitIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public query_sms_task_args(query_sms_task_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetReceiver()) {
				this.receiver = other.receiver;
			}
			this.limit = other.limit;
		}

		public query_sms_task_args deepCopy() {
			return new query_sms_task_args(this);
		}

		public void clear() {
			this.receiver = null;
			setLimitIsSet(false);
			this.limit = 0;
		}

		public String getReceiver() {
			return this.receiver;
		}

		public query_sms_task_args setReceiver(String receiver) {
			this.receiver = receiver;
			return this;
		}

		public void unsetReceiver() {
			this.receiver = null;
		}

		/**
		 * Returns true if field receiver is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetReceiver() {
			return this.receiver != null;
		}

		public void setReceiverIsSet(boolean value) {
			if (!value) {
				this.receiver = null;
			}
		}

		public short getLimit() {
			return this.limit;
		}

		public query_sms_task_args setLimit(short limit) {
			this.limit = limit;
			setLimitIsSet(true);
			return this;
		}

		public void unsetLimit() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__LIMIT_ISSET_ID);
		}

		/**
		 * Returns true if field limit is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetLimit() {
			return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
		}

		public void setLimitIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__LIMIT_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case RECEIVER:
				if (value == null) {
					unsetReceiver();
				} else {
					setReceiver((String) value);
				}
				break;

			case LIMIT:
				if (value == null) {
					unsetLimit();
				} else {
					setLimit((Short) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case RECEIVER:
				return getReceiver();

			case LIMIT:
				return Short.valueOf(getLimit());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case RECEIVER:
				return isSetReceiver();
			case LIMIT:
				return isSetLimit();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof query_sms_task_args)
				return this.equals((query_sms_task_args) that);
			return false;
		}

		public boolean equals(query_sms_task_args that) {
			if (that == null)
				return false;

			boolean this_present_receiver = true && this.isSetReceiver();
			boolean that_present_receiver = true && that.isSetReceiver();
			if (this_present_receiver || that_present_receiver) {
				if (!(this_present_receiver && that_present_receiver))
					return false;
				if (!this.receiver.equals(that.receiver))
					return false;
			}

			boolean this_present_limit = true;
			boolean that_present_limit = true;
			if (this_present_limit || that_present_limit) {
				if (!(this_present_limit && that_present_limit))
					return false;
				if (this.limit != that.limit)
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_receiver = true && (isSetReceiver());
			list.add(present_receiver);
			if (present_receiver)
				list.add(receiver);

			boolean present_limit = true;
			list.add(present_limit);
			if (present_limit)
				list.add(limit);

			return list.hashCode();
		}

		public int compareTo(query_sms_task_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetReceiver()).compareTo(
					other.isSetReceiver());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetReceiver()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.receiver, other.receiver);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetLimit()).compareTo(
					other.isSetLimit());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLimit()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.limit, other.limit);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("query_sms_task_args(");
			boolean first = true;

			sb.append("receiver:");
			if (this.receiver == null) {
				sb.append("null");
			} else {
				sb.append(this.receiver);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("limit:");
			sb.append(this.limit);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class query_sms_task_argsStandardSchemeFactory implements
				SchemeFactory {
			public query_sms_task_argsStandardScheme getScheme() {
				return new query_sms_task_argsStandardScheme();
			}
		}

		private static class query_sms_task_argsStandardScheme extends
				StandardScheme<query_sms_task_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					query_sms_task_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // RECEIVER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.receiver = iprot.readString();
							struct.setReceiverIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // LIMIT
						if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
							struct.limit = iprot.readI16();
							struct.setLimitIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					query_sms_task_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.receiver != null) {
					oprot.writeFieldBegin(RECEIVER_FIELD_DESC);
					oprot.writeString(struct.receiver);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(LIMIT_FIELD_DESC);
				oprot.writeI16(struct.limit);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class query_sms_task_argsTupleSchemeFactory implements
				SchemeFactory {
			public query_sms_task_argsTupleScheme getScheme() {
				return new query_sms_task_argsTupleScheme();
			}
		}

		private static class query_sms_task_argsTupleScheme extends
				TupleScheme<query_sms_task_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					query_sms_task_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetReceiver()) {
					optionals.set(0);
				}
				if (struct.isSetLimit()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetReceiver()) {
					oprot.writeString(struct.receiver);
				}
				if (struct.isSetLimit()) {
					oprot.writeI16(struct.limit);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					query_sms_task_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.receiver = iprot.readString();
					struct.setReceiverIsSet(true);
				}
				if (incoming.get(1)) {
					struct.limit = iprot.readI16();
					struct.setLimitIsSet(true);
				}
			}
		}

	}

	public static class query_sms_task_result
			implements
			org.apache.thrift.TBase<query_sms_task_result, query_sms_task_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<query_sms_task_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"query_sms_task_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new query_sms_task_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new query_sms_task_resultTupleSchemeFactory());
		}

		public List<THermesSMSTaskQueryResult> success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(
					_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData(
							"success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(
									org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.StructMetaData(
											org.apache.thrift.protocol.TType.STRUCT,
											THermesSMSTaskQueryResult.class))));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					query_sms_task_result.class, metaDataMap);
		}

		public query_sms_task_result() {
		}

		public query_sms_task_result(List<THermesSMSTaskQueryResult> success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public query_sms_task_result(query_sms_task_result other) {
			if (other.isSetSuccess()) {
				List<THermesSMSTaskQueryResult> __this__success = new ArrayList<THermesSMSTaskQueryResult>(
						other.success.size());
				for (THermesSMSTaskQueryResult other_element : other.success) {
					__this__success.add(new THermesSMSTaskQueryResult(
							other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public query_sms_task_result deepCopy() {
			return new query_sms_task_result(this);
		}

		public void clear() {
			this.success = null;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<THermesSMSTaskQueryResult> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(THermesSMSTaskQueryResult elem) {
			if (this.success == null) {
				this.success = new ArrayList<THermesSMSTaskQueryResult>();
			}
			this.success.add(elem);
		}

		public List<THermesSMSTaskQueryResult> getSuccess() {
			return this.success;
		}

		public query_sms_task_result setSuccess(
				List<THermesSMSTaskQueryResult> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public query_sms_task_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public query_sms_task_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public query_sms_task_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((List<THermesSMSTaskQueryResult>) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof query_sms_task_result)
				return this.equals((query_sms_task_result) that);
			return false;
		}

		public boolean equals(query_sms_task_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(query_sms_task_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("query_sms_task_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class query_sms_task_resultStandardSchemeFactory
				implements SchemeFactory {
			public query_sms_task_resultStandardScheme getScheme() {
				return new query_sms_task_resultStandardScheme();
			}
		}

		private static class query_sms_task_resultStandardScheme extends
				StandardScheme<query_sms_task_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					query_sms_task_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list34 = iprot
										.readListBegin();
								struct.success = new ArrayList<THermesSMSTaskQueryResult>(
										_list34.size);
								THermesSMSTaskQueryResult _elem35;
								for (int _i36 = 0; _i36 < _list34.size; ++_i36) {
									_elem35 = new THermesSMSTaskQueryResult();
									_elem35.read(iprot);
									struct.success.add(_elem35);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					query_sms_task_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT,
								struct.success.size()));
						for (THermesSMSTaskQueryResult _iter37 : struct.success) {
							_iter37.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class query_sms_task_resultTupleSchemeFactory implements
				SchemeFactory {
			public query_sms_task_resultTupleScheme getScheme() {
				return new query_sms_task_resultTupleScheme();
			}
		}

		private static class query_sms_task_resultTupleScheme extends
				TupleScheme<query_sms_task_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					query_sms_task_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (THermesSMSTaskQueryResult _iter38 : struct.success) {
							_iter38.write(oprot);
						}
					}
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					query_sms_task_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT,
								iprot.readI32());
						struct.success = new ArrayList<THermesSMSTaskQueryResult>(
								_list39.size);
						THermesSMSTaskQueryResult _elem40;
						for (int _i41 = 0; _i41 < _list39.size; ++_i41) {
							_elem40 = new THermesSMSTaskQueryResult();
							_elem40.read(iprot);
							struct.success.add(_elem40);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

	public static class get_template_id_by_slug_args
			implements
			org.apache.thrift.TBase<get_template_id_by_slug_args, get_template_id_by_slug_args._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<get_template_id_by_slug_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_template_id_by_slug_args");

		private static final org.apache.thrift.protocol.TField SLUG_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"slug", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new get_template_id_by_slug_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new get_template_id_by_slug_argsTupleSchemeFactory());
		}

		public String slug; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SLUG((short) 1, "slug");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SLUG
					return SLUG;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SLUG,
					new org.apache.thrift.meta_data.FieldMetaData("slug",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					get_template_id_by_slug_args.class, metaDataMap);
		}

		public get_template_id_by_slug_args() {
		}

		public get_template_id_by_slug_args(String slug) {
			this();
			this.slug = slug;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_template_id_by_slug_args(get_template_id_by_slug_args other) {
			if (other.isSetSlug()) {
				this.slug = other.slug;
			}
		}

		public get_template_id_by_slug_args deepCopy() {
			return new get_template_id_by_slug_args(this);
		}

		public void clear() {
			this.slug = null;
		}

		public String getSlug() {
			return this.slug;
		}

		public get_template_id_by_slug_args setSlug(String slug) {
			this.slug = slug;
			return this;
		}

		public void unsetSlug() {
			this.slug = null;
		}

		/**
		 * Returns true if field slug is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSlug() {
			return this.slug != null;
		}

		public void setSlugIsSet(boolean value) {
			if (!value) {
				this.slug = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SLUG:
				if (value == null) {
					unsetSlug();
				} else {
					setSlug((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SLUG:
				return getSlug();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SLUG:
				return isSetSlug();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_template_id_by_slug_args)
				return this.equals((get_template_id_by_slug_args) that);
			return false;
		}

		public boolean equals(get_template_id_by_slug_args that) {
			if (that == null)
				return false;

			boolean this_present_slug = true && this.isSetSlug();
			boolean that_present_slug = true && that.isSetSlug();
			if (this_present_slug || that_present_slug) {
				if (!(this_present_slug && that_present_slug))
					return false;
				if (!this.slug.equals(that.slug))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_slug = true && (isSetSlug());
			list.add(present_slug);
			if (present_slug)
				list.add(slug);

			return list.hashCode();
		}

		public int compareTo(get_template_id_by_slug_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSlug()).compareTo(
					other.isSetSlug());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSlug()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.slug, other.slug);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"get_template_id_by_slug_args(");
			boolean first = true;

			sb.append("slug:");
			if (this.slug == null) {
				sb.append("null");
			} else {
				sb.append(this.slug);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_template_id_by_slug_argsStandardSchemeFactory
				implements SchemeFactory {
			public get_template_id_by_slug_argsStandardScheme getScheme() {
				return new get_template_id_by_slug_argsStandardScheme();
			}
		}

		private static class get_template_id_by_slug_argsStandardScheme extends
				StandardScheme<get_template_id_by_slug_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					get_template_id_by_slug_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SLUG
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.slug = iprot.readString();
							struct.setSlugIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					get_template_id_by_slug_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.slug != null) {
					oprot.writeFieldBegin(SLUG_FIELD_DESC);
					oprot.writeString(struct.slug);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_template_id_by_slug_argsTupleSchemeFactory
				implements SchemeFactory {
			public get_template_id_by_slug_argsTupleScheme getScheme() {
				return new get_template_id_by_slug_argsTupleScheme();
			}
		}

		private static class get_template_id_by_slug_argsTupleScheme extends
				TupleScheme<get_template_id_by_slug_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					get_template_id_by_slug_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSlug()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSlug()) {
					oprot.writeString(struct.slug);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					get_template_id_by_slug_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.slug = iprot.readString();
					struct.setSlugIsSet(true);
				}
			}
		}

	}

	public static class get_template_id_by_slug_result
			implements
			org.apache.thrift.TBase<get_template_id_by_slug_result, get_template_id_by_slug_result._Fields>,
			java.io.Serializable, Cloneable,
			Comparable<get_template_id_by_slug_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"get_template_id_by_slug_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I64, (short) 0);
		private static final org.apache.thrift.protocol.TField USER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 1);
		private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"system_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 2);
		private static final org.apache.thrift.protocol.TField UNKNOWN_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"unknown_exception", org.apache.thrift.protocol.TType.STRUCT,
				(short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new get_template_id_by_slug_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new get_template_id_by_slug_resultTupleSchemeFactory());
		}

		public long success; // required
		public HermesUserException user_exception; // required
		public HermesSystemException system_exception; // required
		public HermesUnknownException unknown_exception; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success"), USER_EXCEPTION((short) 1,
					"user_exception"), SYSTEM_EXCEPTION((short) 2,
					"system_exception"), UNKNOWN_EXCEPTION((short) 3,
					"unknown_exception");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // USER_EXCEPTION
					return USER_EXCEPTION;
				case 2: // SYSTEM_EXCEPTION
					return SYSTEM_EXCEPTION;
				case 3: // UNKNOWN_EXCEPTION
					return UNKNOWN_EXCEPTION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I64,
									"TemplateId")));
			tmpMap.put(_Fields.USER_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"user_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.SYSTEM_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"system_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			tmpMap.put(_Fields.UNKNOWN_EXCEPTION,
					new org.apache.thrift.meta_data.FieldMetaData(
							"unknown_exception",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRUCT)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					get_template_id_by_slug_result.class, metaDataMap);
		}

		public get_template_id_by_slug_result() {
		}

		public get_template_id_by_slug_result(long success,
				HermesUserException user_exception,
				HermesSystemException system_exception,
				HermesUnknownException unknown_exception) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.user_exception = user_exception;
			this.system_exception = system_exception;
			this.unknown_exception = unknown_exception;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public get_template_id_by_slug_result(
				get_template_id_by_slug_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetUser_exception()) {
				this.user_exception = new HermesUserException(
						other.user_exception);
			}
			if (other.isSetSystem_exception()) {
				this.system_exception = new HermesSystemException(
						other.system_exception);
			}
			if (other.isSetUnknown_exception()) {
				this.unknown_exception = new HermesUnknownException(
						other.unknown_exception);
			}
		}

		public get_template_id_by_slug_result deepCopy() {
			return new get_template_id_by_slug_result(this);
		}

		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
			this.user_exception = null;
			this.system_exception = null;
			this.unknown_exception = null;
		}

		public long getSuccess() {
			return this.success;
		}

		public get_template_id_by_slug_result setSuccess(long success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__SUCCESS_ISSET_ID, value);
		}

		public HermesUserException getUser_exception() {
			return this.user_exception;
		}

		public get_template_id_by_slug_result setUser_exception(
				HermesUserException user_exception) {
			this.user_exception = user_exception;
			return this;
		}

		public void unsetUser_exception() {
			this.user_exception = null;
		}

		/**
		 * Returns true if field user_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUser_exception() {
			return this.user_exception != null;
		}

		public void setUser_exceptionIsSet(boolean value) {
			if (!value) {
				this.user_exception = null;
			}
		}

		public HermesSystemException getSystem_exception() {
			return this.system_exception;
		}

		public get_template_id_by_slug_result setSystem_exception(
				HermesSystemException system_exception) {
			this.system_exception = system_exception;
			return this;
		}

		public void unsetSystem_exception() {
			this.system_exception = null;
		}

		/**
		 * Returns true if field system_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetSystem_exception() {
			return this.system_exception != null;
		}

		public void setSystem_exceptionIsSet(boolean value) {
			if (!value) {
				this.system_exception = null;
			}
		}

		public HermesUnknownException getUnknown_exception() {
			return this.unknown_exception;
		}

		public get_template_id_by_slug_result setUnknown_exception(
				HermesUnknownException unknown_exception) {
			this.unknown_exception = unknown_exception;
			return this;
		}

		public void unsetUnknown_exception() {
			this.unknown_exception = null;
		}

		/**
		 * Returns true if field unknown_exception is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSetUnknown_exception() {
			return this.unknown_exception != null;
		}

		public void setUnknown_exceptionIsSet(boolean value) {
			if (!value) {
				this.unknown_exception = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Long) value);
				}
				break;

			case USER_EXCEPTION:
				if (value == null) {
					unsetUser_exception();
				} else {
					setUser_exception((HermesUserException) value);
				}
				break;

			case SYSTEM_EXCEPTION:
				if (value == null) {
					unsetSystem_exception();
				} else {
					setSystem_exception((HermesSystemException) value);
				}
				break;

			case UNKNOWN_EXCEPTION:
				if (value == null) {
					unsetUnknown_exception();
				} else {
					setUnknown_exception((HermesUnknownException) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Long.valueOf(getSuccess());

			case USER_EXCEPTION:
				return getUser_exception();

			case SYSTEM_EXCEPTION:
				return getSystem_exception();

			case UNKNOWN_EXCEPTION:
				return getUnknown_exception();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case USER_EXCEPTION:
				return isSetUser_exception();
			case SYSTEM_EXCEPTION:
				return isSetSystem_exception();
			case UNKNOWN_EXCEPTION:
				return isSetUnknown_exception();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof get_template_id_by_slug_result)
				return this.equals((get_template_id_by_slug_result) that);
			return false;
		}

		public boolean equals(get_template_id_by_slug_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_user_exception = true && this
					.isSetUser_exception();
			boolean that_present_user_exception = true && that
					.isSetUser_exception();
			if (this_present_user_exception || that_present_user_exception) {
				if (!(this_present_user_exception && that_present_user_exception))
					return false;
				if (!this.user_exception.equals(that.user_exception))
					return false;
			}

			boolean this_present_system_exception = true && this
					.isSetSystem_exception();
			boolean that_present_system_exception = true && that
					.isSetSystem_exception();
			if (this_present_system_exception || that_present_system_exception) {
				if (!(this_present_system_exception && that_present_system_exception))
					return false;
				if (!this.system_exception.equals(that.system_exception))
					return false;
			}

			boolean this_present_unknown_exception = true && this
					.isSetUnknown_exception();
			boolean that_present_unknown_exception = true && that
					.isSetUnknown_exception();
			if (this_present_unknown_exception
					|| that_present_unknown_exception) {
				if (!(this_present_unknown_exception && that_present_unknown_exception))
					return false;
				if (!this.unknown_exception.equals(that.unknown_exception))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true;
			list.add(present_success);
			if (present_success)
				list.add(success);

			boolean present_user_exception = true && (isSetUser_exception());
			list.add(present_user_exception);
			if (present_user_exception)
				list.add(user_exception);

			boolean present_system_exception = true && (isSetSystem_exception());
			list.add(present_system_exception);
			if (present_system_exception)
				list.add(system_exception);

			boolean present_unknown_exception = true && (isSetUnknown_exception());
			list.add(present_unknown_exception);
			if (present_unknown_exception)
				list.add(unknown_exception);

			return list.hashCode();
		}

		public int compareTo(get_template_id_by_slug_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUser_exception()).compareTo(
					other.isSetUser_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.user_exception, other.user_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetSystem_exception())
					.compareTo(other.isSetSystem_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSystem_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.system_exception, other.system_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetUnknown_exception())
					.compareTo(other.isSetUnknown_exception());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUnknown_exception()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.unknown_exception, other.unknown_exception);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder(
					"get_template_id_by_slug_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user_exception:");
			if (this.user_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.user_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("system_exception:");
			if (this.system_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.system_exception);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("unknown_exception:");
			if (this.unknown_exception == null) {
				sb.append("null");
			} else {
				sb.append(this.unknown_exception);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class get_template_id_by_slug_resultStandardSchemeFactory
				implements SchemeFactory {
			public get_template_id_by_slug_resultStandardScheme getScheme() {
				return new get_template_id_by_slug_resultStandardScheme();
			}
		}

		private static class get_template_id_by_slug_resultStandardScheme
				extends StandardScheme<get_template_id_by_slug_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					get_template_id_by_slug_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.success = iprot.readI64();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 1: // USER_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user_exception = new HermesUserException();
							struct.user_exception.read(iprot);
							struct.setUser_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // SYSTEM_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.system_exception = new HermesSystemException();
							struct.system_exception.read(iprot);
							struct.setSystem_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // UNKNOWN_EXCEPTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.unknown_exception = new HermesUnknownException();
							struct.unknown_exception.read(iprot);
							struct.setUnknown_exceptionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					get_template_id_by_slug_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI64(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.user_exception != null) {
					oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
					struct.user_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.system_exception != null) {
					oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
					struct.system_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.unknown_exception != null) {
					oprot.writeFieldBegin(UNKNOWN_EXCEPTION_FIELD_DESC);
					struct.unknown_exception.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class get_template_id_by_slug_resultTupleSchemeFactory
				implements SchemeFactory {
			public get_template_id_by_slug_resultTupleScheme getScheme() {
				return new get_template_id_by_slug_resultTupleScheme();
			}
		}

		private static class get_template_id_by_slug_resultTupleScheme extends
				TupleScheme<get_template_id_by_slug_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					get_template_id_by_slug_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetUser_exception()) {
					optionals.set(1);
				}
				if (struct.isSetSystem_exception()) {
					optionals.set(2);
				}
				if (struct.isSetUnknown_exception()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetSuccess()) {
					oprot.writeI64(struct.success);
				}
				if (struct.isSetUser_exception()) {
					struct.user_exception.write(oprot);
				}
				if (struct.isSetSystem_exception()) {
					struct.system_exception.write(oprot);
				}
				if (struct.isSetUnknown_exception()) {
					struct.unknown_exception.write(oprot);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					get_template_id_by_slug_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.success = iprot.readI64();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user_exception = new HermesUserException();
					struct.user_exception.read(iprot);
					struct.setUser_exceptionIsSet(true);
				}
				if (incoming.get(2)) {
					struct.system_exception = new HermesSystemException();
					struct.system_exception.read(iprot);
					struct.setSystem_exceptionIsSet(true);
				}
				if (incoming.get(3)) {
					struct.unknown_exception = new HermesUnknownException();
					struct.unknown_exception.read(iprot);
					struct.setUnknown_exceptionIsSet(true);
				}
			}
		}

	}

}
