package me.ele.talaris.hermes.client;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-22")
public class THermesUserReply implements
		org.apache.thrift.TBase<THermesUserReply, THermesUserReply._Fields>,
		java.io.Serializable, Cloneable, Comparable<THermesUserReply> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"THermesUserReply");

	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"id", org.apache.thrift.protocol.TType.I64, (short) 1);
	private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"phone_number", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField REPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"reply_time", org.apache.thrift.protocol.TType.I64, (short) 3);
	private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"message", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class,
				new THermesUserReplyStandardSchemeFactory());
		schemes.put(TupleScheme.class, new THermesUserReplyTupleSchemeFactory());
	}

	public long id; // required
	public String phone_number; // required
	public long reply_time; // required
	public String message; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ID((short) 1, "id"), PHONE_NUMBER((short) 2, "phone_number"), REPLY_TIME(
				(short) 3, "reply_time"), MESSAGE((short) 4, "message");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ID
				return ID;
			case 2: // PHONE_NUMBER
				return PHONE_NUMBER;
			case 3: // REPLY_TIME
				return REPLY_TIME;
			case 4: // MESSAGE
				return MESSAGE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ID_ISSET_ID = 0;
	private static final int __REPLY_TIME_ISSET_ID = 1;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData(
				"id", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.PHONE_NUMBER,
				new org.apache.thrift.meta_data.FieldMetaData("phone_number",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REPLY_TIME,
				new org.apache.thrift.meta_data.FieldMetaData("reply_time",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.I64,
								"Timestamp")));
		tmpMap.put(_Fields.MESSAGE,
				new org.apache.thrift.meta_data.FieldMetaData("message",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				THermesUserReply.class, metaDataMap);
	}

	public THermesUserReply() {
	}

	public THermesUserReply(long id, String phone_number, long reply_time,
			String message) {
		this();
		this.id = id;
		setIdIsSet(true);
		this.phone_number = phone_number;
		this.reply_time = reply_time;
		setReply_timeIsSet(true);
		this.message = message;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public THermesUserReply(THermesUserReply other) {
		__isset_bitfield = other.__isset_bitfield;
		this.id = other.id;
		if (other.isSetPhone_number()) {
			this.phone_number = other.phone_number;
		}
		this.reply_time = other.reply_time;
		if (other.isSetMessage()) {
			this.message = other.message;
		}
	}

	public THermesUserReply deepCopy() {
		return new THermesUserReply(this);
	}

	public void clear() {
		setIdIsSet(false);
		this.id = 0;
		this.phone_number = null;
		setReply_timeIsSet(false);
		this.reply_time = 0;
		this.message = null;
	}

	public long getId() {
		return this.id;
	}

	public THermesUserReply setId(long id) {
		this.id = id;
		setIdIsSet(true);
		return this;
	}

	public void unsetId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__ID_ISSET_ID);
	}

	/**
	 * Returns true if field id is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetId() {
		return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
	}

	public void setIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__ID_ISSET_ID, value);
	}

	public String getPhone_number() {
		return this.phone_number;
	}

	public THermesUserReply setPhone_number(String phone_number) {
		this.phone_number = phone_number;
		return this;
	}

	public void unsetPhone_number() {
		this.phone_number = null;
	}

	/**
	 * Returns true if field phone_number is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetPhone_number() {
		return this.phone_number != null;
	}

	public void setPhone_numberIsSet(boolean value) {
		if (!value) {
			this.phone_number = null;
		}
	}

	public long getReply_time() {
		return this.reply_time;
	}

	public THermesUserReply setReply_time(long reply_time) {
		this.reply_time = reply_time;
		setReply_timeIsSet(true);
		return this;
	}

	public void unsetReply_time() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
				__REPLY_TIME_ISSET_ID);
	}

	/**
	 * Returns true if field reply_time is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetReply_time() {
		return EncodingUtils.testBit(__isset_bitfield, __REPLY_TIME_ISSET_ID);
	}

	public void setReply_timeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
				__REPLY_TIME_ISSET_ID, value);
	}

	public String getMessage() {
		return this.message;
	}

	public THermesUserReply setMessage(String message) {
		this.message = message;
		return this;
	}

	public void unsetMessage() {
		this.message = null;
	}

	/**
	 * Returns true if field message is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetMessage() {
		return this.message != null;
	}

	public void setMessageIsSet(boolean value) {
		if (!value) {
			this.message = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ID:
			if (value == null) {
				unsetId();
			} else {
				setId((Long) value);
			}
			break;

		case PHONE_NUMBER:
			if (value == null) {
				unsetPhone_number();
			} else {
				setPhone_number((String) value);
			}
			break;

		case REPLY_TIME:
			if (value == null) {
				unsetReply_time();
			} else {
				setReply_time((Long) value);
			}
			break;

		case MESSAGE:
			if (value == null) {
				unsetMessage();
			} else {
				setMessage((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ID:
			return Long.valueOf(getId());

		case PHONE_NUMBER:
			return getPhone_number();

		case REPLY_TIME:
			return Long.valueOf(getReply_time());

		case MESSAGE:
			return getMessage();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ID:
			return isSetId();
		case PHONE_NUMBER:
			return isSetPhone_number();
		case REPLY_TIME:
			return isSetReply_time();
		case MESSAGE:
			return isSetMessage();
		}
		throw new IllegalStateException();
	}

	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof THermesUserReply)
			return this.equals((THermesUserReply) that);
		return false;
	}

	public boolean equals(THermesUserReply that) {
		if (that == null)
			return false;

		boolean this_present_id = true;
		boolean that_present_id = true;
		if (this_present_id || that_present_id) {
			if (!(this_present_id && that_present_id))
				return false;
			if (this.id != that.id)
				return false;
		}

		boolean this_present_phone_number = true && this.isSetPhone_number();
		boolean that_present_phone_number = true && that.isSetPhone_number();
		if (this_present_phone_number || that_present_phone_number) {
			if (!(this_present_phone_number && that_present_phone_number))
				return false;
			if (!this.phone_number.equals(that.phone_number))
				return false;
		}

		boolean this_present_reply_time = true;
		boolean that_present_reply_time = true;
		if (this_present_reply_time || that_present_reply_time) {
			if (!(this_present_reply_time && that_present_reply_time))
				return false;
			if (this.reply_time != that.reply_time)
				return false;
		}

		boolean this_present_message = true && this.isSetMessage();
		boolean that_present_message = true && that.isSetMessage();
		if (this_present_message || that_present_message) {
			if (!(this_present_message && that_present_message))
				return false;
			if (!this.message.equals(that.message))
				return false;
		}

		return true;
	}

	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_id = true;
		list.add(present_id);
		if (present_id)
			list.add(id);

		boolean present_phone_number = true && (isSetPhone_number());
		list.add(present_phone_number);
		if (present_phone_number)
			list.add(phone_number);

		boolean present_reply_time = true;
		list.add(present_reply_time);
		if (present_reply_time)
			list.add(reply_time);

		boolean present_message = true && (isSetMessage());
		list.add(present_message);
		if (present_message)
			list.add(message);

		return list.hashCode();
	}

	public int compareTo(THermesUserReply other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id,
					other.id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetPhone_number()).compareTo(
				other.isSetPhone_number());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPhone_number()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.phone_number, other.phone_number);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetReply_time()).compareTo(
				other.isSetReply_time());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReply_time()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.reply_time, other.reply_time);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMessage()).compareTo(
				other.isSetMessage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMessage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.message, other.message);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	public String toString() {
		StringBuilder sb = new StringBuilder("THermesUserReply(");
		boolean first = true;

		sb.append("id:");
		sb.append(this.id);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("phone_number:");
		if (this.phone_number == null) {
			sb.append("null");
		} else {
			sb.append(this.phone_number);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("reply_time:");
		sb.append(this.reply_time);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("message:");
		if (this.message == null) {
			sb.append("null");
		} else {
			sb.append(this.message);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// alas, we cannot check 'id' because it's a primitive and you chose the
		// non-beans generator.
		if (phone_number == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'phone_number' was not present! Struct: "
							+ toString());
		}
		// alas, we cannot check 'reply_time' because it's a primitive and you
		// chose the non-beans generator.
		if (message == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'message' was not present! Struct: "
							+ toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class THermesUserReplyStandardSchemeFactory implements
			SchemeFactory {
		public THermesUserReplyStandardScheme getScheme() {
			return new THermesUserReplyStandardScheme();
		}
	}

	private static class THermesUserReplyStandardScheme extends
			StandardScheme<THermesUserReply> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				THermesUserReply struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ID
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.id = iprot.readI64();
						struct.setIdIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // PHONE_NUMBER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.phone_number = iprot.readString();
						struct.setPhone_numberIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 3: // REPLY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.reply_time = iprot.readI64();
						struct.setReply_timeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 4: // MESSAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.message = iprot.readString();
						struct.setMessageIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			if (!struct.isSetId()) {
				throw new org.apache.thrift.protocol.TProtocolException(
						"Required field 'id' was not found in serialized data! Struct: "
								+ toString());
			}
			if (!struct.isSetReply_time()) {
				throw new org.apache.thrift.protocol.TProtocolException(
						"Required field 'reply_time' was not found in serialized data! Struct: "
								+ toString());
			}
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				THermesUserReply struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ID_FIELD_DESC);
			oprot.writeI64(struct.id);
			oprot.writeFieldEnd();
			if (struct.phone_number != null) {
				oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
				oprot.writeString(struct.phone_number);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(REPLY_TIME_FIELD_DESC);
			oprot.writeI64(struct.reply_time);
			oprot.writeFieldEnd();
			if (struct.message != null) {
				oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
				oprot.writeString(struct.message);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class THermesUserReplyTupleSchemeFactory implements
			SchemeFactory {
		public THermesUserReplyTupleScheme getScheme() {
			return new THermesUserReplyTupleScheme();
		}
	}

	private static class THermesUserReplyTupleScheme extends
			TupleScheme<THermesUserReply> {

		public void write(org.apache.thrift.protocol.TProtocol prot,
				THermesUserReply struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeI64(struct.id);
			oprot.writeString(struct.phone_number);
			oprot.writeI64(struct.reply_time);
			oprot.writeString(struct.message);
		}

		public void read(org.apache.thrift.protocol.TProtocol prot,
				THermesUserReply struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.id = iprot.readI64();
			struct.setIdIsSet(true);
			struct.phone_number = iprot.readString();
			struct.setPhone_numberIsSet(true);
			struct.reply_time = iprot.readI64();
			struct.setReply_timeIsSet(true);
			struct.message = iprot.readString();
			struct.setMessageIsSet(true);
		}
	}

}
