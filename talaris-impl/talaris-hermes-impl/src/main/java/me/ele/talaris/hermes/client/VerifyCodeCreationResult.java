package me.ele.talaris.hermes.client;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-22")
public class VerifyCodeCreationResult
		implements
		org.apache.thrift.TBase<VerifyCodeCreationResult, VerifyCodeCreationResult._Fields>,
		java.io.Serializable, Cloneable, Comparable<VerifyCodeCreationResult> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"VerifyCodeCreationResult");

	private static final org.apache.thrift.protocol.TField HASH_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"hash_value", org.apache.thrift.protocol.TType.STRING, (short) 1);
	private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"code", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class,
				new VerifyCodeCreationResultStandardSchemeFactory());
		schemes.put(TupleScheme.class,
				new VerifyCodeCreationResultTupleSchemeFactory());
	}

	public String hash_value; // required
	public String code; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		HASH_VALUE((short) 1, "hash_value"), CODE((short) 2, "code");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // HASH_VALUE
				return HASH_VALUE;
			case 2: // CODE
				return CODE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId
						+ " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.HASH_VALUE,
				new org.apache.thrift.meta_data.FieldMetaData("hash_value",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.FieldValueMetaData(
								org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData(
				"code", org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
				VerifyCodeCreationResult.class, metaDataMap);
	}

	public VerifyCodeCreationResult() {
	}

	public VerifyCodeCreationResult(String hash_value, String code) {
		this();
		this.hash_value = hash_value;
		this.code = code;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public VerifyCodeCreationResult(VerifyCodeCreationResult other) {
		if (other.isSetHash_value()) {
			this.hash_value = other.hash_value;
		}
		if (other.isSetCode()) {
			this.code = other.code;
		}
	}

	public VerifyCodeCreationResult deepCopy() {
		return new VerifyCodeCreationResult(this);
	}

	public void clear() {
		this.hash_value = null;
		this.code = null;
	}

	public String getHash_value() {
		return this.hash_value;
	}

	public VerifyCodeCreationResult setHash_value(String hash_value) {
		this.hash_value = hash_value;
		return this;
	}

	public void unsetHash_value() {
		this.hash_value = null;
	}

	/**
	 * Returns true if field hash_value is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetHash_value() {
		return this.hash_value != null;
	}

	public void setHash_valueIsSet(boolean value) {
		if (!value) {
			this.hash_value = null;
		}
	}

	public String getCode() {
		return this.code;
	}

	public VerifyCodeCreationResult setCode(String code) {
		this.code = code;
		return this;
	}

	public void unsetCode() {
		this.code = null;
	}

	/**
	 * Returns true if field code is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCode() {
		return this.code != null;
	}

	public void setCodeIsSet(boolean value) {
		if (!value) {
			this.code = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case HASH_VALUE:
			if (value == null) {
				unsetHash_value();
			} else {
				setHash_value((String) value);
			}
			break;

		case CODE:
			if (value == null) {
				unsetCode();
			} else {
				setCode((String) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case HASH_VALUE:
			return getHash_value();

		case CODE:
			return getCode();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case HASH_VALUE:
			return isSetHash_value();
		case CODE:
			return isSetCode();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof VerifyCodeCreationResult)
			return this.equals((VerifyCodeCreationResult) that);
		return false;
	}

	public boolean equals(VerifyCodeCreationResult that) {
		if (that == null)
			return false;

		boolean this_present_hash_value = true && this.isSetHash_value();
		boolean that_present_hash_value = true && that.isSetHash_value();
		if (this_present_hash_value || that_present_hash_value) {
			if (!(this_present_hash_value && that_present_hash_value))
				return false;
			if (!this.hash_value.equals(that.hash_value))
				return false;
		}

		boolean this_present_code = true && this.isSetCode();
		boolean that_present_code = true && that.isSetCode();
		if (this_present_code || that_present_code) {
			if (!(this_present_code && that_present_code))
				return false;
			if (!this.code.equals(that.code))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_hash_value = true && (isSetHash_value());
		list.add(present_hash_value);
		if (present_hash_value)
			list.add(hash_value);

		boolean present_code = true && (isSetCode());
		list.add(present_code);
		if (present_code)
			list.add(code);

		return list.hashCode();
	}

	public int compareTo(VerifyCodeCreationResult other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetHash_value()).compareTo(
				other.isSetHash_value());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetHash_value()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(
					this.hash_value, other.hash_value);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCode()).compareTo(
				other.isSetCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code,
					other.code);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("VerifyCodeCreationResult(");
		boolean first = true;

		sb.append("hash_value:");
		if (this.hash_value == null) {
			sb.append("null");
		} else {
			sb.append(this.hash_value);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("code:");
		if (this.code == null) {
			sb.append("null");
		} else {
			sb.append(this.code);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (hash_value == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'hash_value' was not present! Struct: "
							+ toString());
		}
		if (code == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'code' was not present! Struct: "
							+ toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out)
			throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in)
			throws java.io.IOException, ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class VerifyCodeCreationResultStandardSchemeFactory
			implements SchemeFactory {
		public VerifyCodeCreationResultStandardScheme getScheme() {
			return new VerifyCodeCreationResultStandardScheme();
		}
	}

	private static class VerifyCodeCreationResultStandardScheme extends
			StandardScheme<VerifyCodeCreationResult> {

		public void read(org.apache.thrift.protocol.TProtocol iprot,
				VerifyCodeCreationResult struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // HASH_VALUE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.hash_value = iprot.readString();
						struct.setHash_valueIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				case 2: // CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.code = iprot.readString();
						struct.setCodeIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
							schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot,
				VerifyCodeCreationResult struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.hash_value != null) {
				oprot.writeFieldBegin(HASH_VALUE_FIELD_DESC);
				oprot.writeString(struct.hash_value);
				oprot.writeFieldEnd();
			}
			if (struct.code != null) {
				oprot.writeFieldBegin(CODE_FIELD_DESC);
				oprot.writeString(struct.code);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class VerifyCodeCreationResultTupleSchemeFactory implements
			SchemeFactory {
		public VerifyCodeCreationResultTupleScheme getScheme() {
			return new VerifyCodeCreationResultTupleScheme();
		}
	}

	private static class VerifyCodeCreationResultTupleScheme extends
			TupleScheme<VerifyCodeCreationResult> {

		public void write(org.apache.thrift.protocol.TProtocol prot,
				VerifyCodeCreationResult struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeString(struct.hash_value);
			oprot.writeString(struct.code);
		}

		public void read(org.apache.thrift.protocol.TProtocol prot,
				VerifyCodeCreationResult struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.hash_value = iprot.readString();
			struct.setHash_valueIsSet(true);
			struct.code = iprot.readString();
			struct.setCodeIsSet(true);
		}
	}

}
